/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UpgradeableHYAXRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GROWTH_TOKENS_TOTAL"
      | "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR"
      | "TEAM_TOKENS_LOCKED_PERIOD"
      | "TEAM_TOKENS_TOTAL"
      | "TEAM_TOKENS_WITHDRAWAL_PER_YEAR"
      | "TOKENS_WITHDRAWAL_PERIOD"
      | "addWalletToWhitelist"
      | "fundSmartContract"
      | "growthTokensFunded"
      | "growthTokensFundingStarted"
      | "growthTokensInSmartContract"
      | "growthTokensLastWithdrawalTime"
      | "growthTokensStartFundingTime"
      | "growthTokensWithdrawn"
      | "hyaxToken"
      | "hyaxTokenAddress"
      | "owner"
      | "pause"
      | "paused"
      | "removeWalletFromWhitelist"
      | "renounceOwnership"
      | "rewardsUpdaterAddress"
      | "teamTokensFunded"
      | "teamTokensFundingStarted"
      | "teamTokensInSmartContract"
      | "teamTokensStartFundingTime"
      | "teamTokensWithdrawn"
      | "tokenInvestorRewards"
      | "transferOwnership"
      | "unpause"
      | "updateHyaxTokenAddress"
      | "updateWhiteListerAddress"
      | "wallets"
      | "whiteListerAddress"
      | "withdrawGrowthTokens"
      | "withdrawInvestorRewards"
      | "withdrawTeamTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FundingAdded"
      | "GrowthTokensWithdrawn"
      | "InvestorRewardsWithdrawn"
      | "OwnershipTransferred"
      | "Paused"
      | "TeamTokensWithdrawn"
      | "Unpaused"
      | "WalletAddedToWhitelist"
      | "WalletRemovedFromWhitelist"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GROWTH_TOKENS_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_TOKENS_LOCKED_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_TOKENS_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_TOKENS_WITHDRAWAL_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKENS_WITHDRAWAL_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWalletToWhitelist",
    values: [AddressLike, boolean, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fundSmartContract",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensFunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensFundingStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensInSmartContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensLastWithdrawalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensStartFundingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hyaxToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hyaxTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeWalletFromWhitelist",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsUpdaterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensFunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensFundingStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensInSmartContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensStartFundingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenInvestorRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateHyaxTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhiteListerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawGrowthTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawInvestorRewards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTeamTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "GROWTH_TOKENS_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_TOKENS_LOCKED_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_TOKENS_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_TOKENS_WITHDRAWAL_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKENS_WITHDRAWAL_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWalletToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensFundingStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensInSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensLastWithdrawalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensStartFundingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hyaxToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hyaxTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWalletFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsUpdaterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensFundingStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensInSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensStartFundingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenInvestorRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateHyaxTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhiteListerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGrowthTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawInvestorRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTeamTokens",
    data: BytesLike
  ): Result;
}

export namespace FundingAddedEvent {
  export type InputTuple = [_fundingType: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_fundingType: bigint, _amount: bigint];
  export interface OutputObject {
    _fundingType: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrowthTokensWithdrawnEvent {
  export type InputTuple = [_walletAddress: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_walletAddress: string, _amount: bigint];
  export interface OutputObject {
    _walletAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InvestorRewardsWithdrawnEvent {
  export type InputTuple = [_walletAddress: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_walletAddress: string, _amount: bigint];
  export interface OutputObject {
    _walletAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamTokensWithdrawnEvent {
  export type InputTuple = [_walletAddress: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_walletAddress: string, _amount: bigint];
  export interface OutputObject {
    _walletAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletAddedToWhitelistEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddress: AddressLike,
    _isTeamWallet: boolean,
    _bitcoinRewardsAddress: string,
    _hyaxHoldingAmount: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddress: string,
    _isTeamWallet: boolean,
    _bitcoinRewardsAddress: string,
    _hyaxHoldingAmount: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
    _isTeamWallet: boolean;
    _bitcoinRewardsAddress: string;
    _hyaxHoldingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletRemovedFromWhitelistEvent {
  export type InputTuple = [_sender: AddressLike, _walletAddress: AddressLike];
  export type OutputTuple = [_sender: string, _walletAddress: string];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UpgradeableHYAXRewards extends BaseContract {
  connect(runner?: ContractRunner | null): UpgradeableHYAXRewards;
  waitForDeployment(): Promise<this>;

  interface: UpgradeableHYAXRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GROWTH_TOKENS_TOTAL: TypedContractMethod<[], [bigint], "view">;

  GROWTH_TOKENS_WITHDRAWAL_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  TEAM_TOKENS_LOCKED_PERIOD: TypedContractMethod<[], [bigint], "view">;

  TEAM_TOKENS_TOTAL: TypedContractMethod<[], [bigint], "view">;

  TEAM_TOKENS_WITHDRAWAL_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  TOKENS_WITHDRAWAL_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addWalletToWhitelist: TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _isTeamWallet: boolean,
      _bitcoinRewardsAddress: string,
      _hyaxHoldingAmountAtWhitelistTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  fundSmartContract: TypedContractMethod<
    [_fundingType: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  growthTokensFunded: TypedContractMethod<[], [bigint], "view">;

  growthTokensFundingStarted: TypedContractMethod<[], [boolean], "view">;

  growthTokensInSmartContract: TypedContractMethod<[], [bigint], "view">;

  growthTokensLastWithdrawalTime: TypedContractMethod<[], [bigint], "view">;

  growthTokensStartFundingTime: TypedContractMethod<[], [bigint], "view">;

  growthTokensWithdrawn: TypedContractMethod<[], [bigint], "view">;

  hyaxToken: TypedContractMethod<[], [string], "view">;

  hyaxTokenAddress: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  removeWalletFromWhitelist: TypedContractMethod<
    [_walletAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardsUpdaterAddress: TypedContractMethod<[], [string], "view">;

  teamTokensFunded: TypedContractMethod<[], [bigint], "view">;

  teamTokensFundingStarted: TypedContractMethod<[], [boolean], "view">;

  teamTokensInSmartContract: TypedContractMethod<[], [bigint], "view">;

  teamTokensStartFundingTime: TypedContractMethod<[], [bigint], "view">;

  teamTokensWithdrawn: TypedContractMethod<[], [bigint], "view">;

  tokenInvestorRewards: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateHyaxTokenAddress: TypedContractMethod<
    [_hyaxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateWhiteListerAddress: TypedContractMethod<
    [_whiteListerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  wallets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        hyaxHoldingAmount: bigint;
        hyaxHoldingAmountAtWhitelistTime: bigint;
        totalHyaxRewardsAmount: bigint;
        currentRewardsAmount: bigint;
        rewardsWithdrawn: bigint;
        bitcoinRewardsAddress: string;
        addedToWhitelistTime: bigint;
        lastTokenWithdrawalTime: bigint;
        lastRewardsWithdrawalTime: bigint;
        isTeamWallet: boolean;
        isWhitelisted: boolean;
      }
    ],
    "view"
  >;

  whiteListerAddress: TypedContractMethod<[], [string], "view">;

  withdrawGrowthTokens: TypedContractMethod<[], [void], "nonpayable">;

  withdrawInvestorRewards: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTeamTokens: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GROWTH_TOKENS_TOTAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEAM_TOKENS_LOCKED_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEAM_TOKENS_TOTAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEAM_TOKENS_WITHDRAWAL_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKENS_WITHDRAWAL_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addWalletToWhitelist"
  ): TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _isTeamWallet: boolean,
      _bitcoinRewardsAddress: string,
      _hyaxHoldingAmountAtWhitelistTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fundSmartContract"
  ): TypedContractMethod<
    [_fundingType: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "growthTokensFunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensFundingStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "growthTokensInSmartContract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensLastWithdrawalTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensStartFundingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hyaxToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hyaxTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeWalletFromWhitelist"
  ): TypedContractMethod<[_walletAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardsUpdaterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamTokensFunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamTokensFundingStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "teamTokensInSmartContract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamTokensStartFundingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamTokensWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "tokenInvestorRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateHyaxTokenAddress"
  ): TypedContractMethod<
    [_hyaxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWhiteListerAddress"
  ): TypedContractMethod<
    [_whiteListerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wallets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean
      ] & {
        hyaxHoldingAmount: bigint;
        hyaxHoldingAmountAtWhitelistTime: bigint;
        totalHyaxRewardsAmount: bigint;
        currentRewardsAmount: bigint;
        rewardsWithdrawn: bigint;
        bitcoinRewardsAddress: string;
        addedToWhitelistTime: bigint;
        lastTokenWithdrawalTime: bigint;
        lastRewardsWithdrawalTime: bigint;
        isTeamWallet: boolean;
        isWhitelisted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whiteListerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawGrowthTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawInvestorRewards"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTeamTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "FundingAdded"
  ): TypedContractEvent<
    FundingAddedEvent.InputTuple,
    FundingAddedEvent.OutputTuple,
    FundingAddedEvent.OutputObject
  >;
  getEvent(
    key: "GrowthTokensWithdrawn"
  ): TypedContractEvent<
    GrowthTokensWithdrawnEvent.InputTuple,
    GrowthTokensWithdrawnEvent.OutputTuple,
    GrowthTokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "InvestorRewardsWithdrawn"
  ): TypedContractEvent<
    InvestorRewardsWithdrawnEvent.InputTuple,
    InvestorRewardsWithdrawnEvent.OutputTuple,
    InvestorRewardsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "TeamTokensWithdrawn"
  ): TypedContractEvent<
    TeamTokensWithdrawnEvent.InputTuple,
    TeamTokensWithdrawnEvent.OutputTuple,
    TeamTokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WalletAddedToWhitelist"
  ): TypedContractEvent<
    WalletAddedToWhitelistEvent.InputTuple,
    WalletAddedToWhitelistEvent.OutputTuple,
    WalletAddedToWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "WalletRemovedFromWhitelist"
  ): TypedContractEvent<
    WalletRemovedFromWhitelistEvent.InputTuple,
    WalletRemovedFromWhitelistEvent.OutputTuple,
    WalletRemovedFromWhitelistEvent.OutputObject
  >;

  filters: {
    "FundingAdded(uint8,uint256)": TypedContractEvent<
      FundingAddedEvent.InputTuple,
      FundingAddedEvent.OutputTuple,
      FundingAddedEvent.OutputObject
    >;
    FundingAdded: TypedContractEvent<
      FundingAddedEvent.InputTuple,
      FundingAddedEvent.OutputTuple,
      FundingAddedEvent.OutputObject
    >;

    "GrowthTokensWithdrawn(address,uint256)": TypedContractEvent<
      GrowthTokensWithdrawnEvent.InputTuple,
      GrowthTokensWithdrawnEvent.OutputTuple,
      GrowthTokensWithdrawnEvent.OutputObject
    >;
    GrowthTokensWithdrawn: TypedContractEvent<
      GrowthTokensWithdrawnEvent.InputTuple,
      GrowthTokensWithdrawnEvent.OutputTuple,
      GrowthTokensWithdrawnEvent.OutputObject
    >;

    "InvestorRewardsWithdrawn(address,uint256)": TypedContractEvent<
      InvestorRewardsWithdrawnEvent.InputTuple,
      InvestorRewardsWithdrawnEvent.OutputTuple,
      InvestorRewardsWithdrawnEvent.OutputObject
    >;
    InvestorRewardsWithdrawn: TypedContractEvent<
      InvestorRewardsWithdrawnEvent.InputTuple,
      InvestorRewardsWithdrawnEvent.OutputTuple,
      InvestorRewardsWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "TeamTokensWithdrawn(address,uint256)": TypedContractEvent<
      TeamTokensWithdrawnEvent.InputTuple,
      TeamTokensWithdrawnEvent.OutputTuple,
      TeamTokensWithdrawnEvent.OutputObject
    >;
    TeamTokensWithdrawn: TypedContractEvent<
      TeamTokensWithdrawnEvent.InputTuple,
      TeamTokensWithdrawnEvent.OutputTuple,
      TeamTokensWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WalletAddedToWhitelist(address,address,bool,string,uint256)": TypedContractEvent<
      WalletAddedToWhitelistEvent.InputTuple,
      WalletAddedToWhitelistEvent.OutputTuple,
      WalletAddedToWhitelistEvent.OutputObject
    >;
    WalletAddedToWhitelist: TypedContractEvent<
      WalletAddedToWhitelistEvent.InputTuple,
      WalletAddedToWhitelistEvent.OutputTuple,
      WalletAddedToWhitelistEvent.OutputObject
    >;

    "WalletRemovedFromWhitelist(address,address)": TypedContractEvent<
      WalletRemovedFromWhitelistEvent.InputTuple,
      WalletRemovedFromWhitelistEvent.OutputTuple,
      WalletRemovedFromWhitelistEvent.OutputObject
    >;
    WalletRemovedFromWhitelist: TypedContractEvent<
      WalletRemovedFromWhitelistEvent.InputTuple,
      WalletRemovedFromWhitelistEvent.OutputTuple,
      WalletRemovedFromWhitelistEvent.OutputObject
    >;
  };
}
