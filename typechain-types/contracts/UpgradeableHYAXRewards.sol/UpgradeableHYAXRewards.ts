/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface UpgradeableHYAXRewardsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "GROWTH_TOKENS_TOTAL"
      | "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR"
      | "MIN_INTERVAL_FOR_UPDATE_REWARDS"
      | "REWARD_TOKENS_PER_WEEK"
      | "REWARD_TOKENS_PER_YEAR"
      | "REWARD_TOKENS_TOTAL"
      | "TEAM_TOKENS_LOCKED_PERIOD"
      | "TEAM_TOKENS_TOTAL"
      | "TEAM_TOKENS_WITHDRAWAL_PER_YEAR"
      | "TOKENS_WITHDRAWAL_PERIOD"
      | "addWalletToWhitelist"
      | "calculateYearForTeamTokens"
      | "fundSmartContract"
      | "growthTokensFunded"
      | "growthTokensFundingStarted"
      | "growthTokensInSmartContract"
      | "growthTokensLastWithdrawalTime"
      | "growthTokensStartFundingTime"
      | "growthTokensWithdrawn"
      | "hyaxToken"
      | "hyaxTokenAddress"
      | "initialize"
      | "maximumBatchSizeForUpdateRewards"
      | "owner"
      | "pause"
      | "paused"
      | "recoverTeamTokens"
      | "renounceOwnership"
      | "rewardTokensDistributed"
      | "rewardTokensFunded"
      | "rewardTokensFundingStarted"
      | "rewardTokensInSmartContract"
      | "rewardTokensStartFundingTime"
      | "rewardTokensWithdrawn"
      | "rewardsUpdaterAddress"
      | "teamTokensFunded"
      | "teamTokensFundingStarted"
      | "teamTokensInSmartContract"
      | "teamTokensStartFundingTime"
      | "teamTokensWithdrawn"
      | "transferOwnership"
      | "unpause"
      | "updateBlacklistStatus"
      | "updateHyaxTokenAddress"
      | "updateMaximumBatchSizeForUpdateRewards"
      | "updateRewardsBatch"
      | "updateRewardsSingle"
      | "updateRewardsUpdaterAddress"
      | "updateWhiteListerAddress"
      | "updateWhitelistStatus"
      | "wallets"
      | "whiteListerAddress"
      | "withdrawGrowthTokens"
      | "withdrawRewardTokens"
      | "withdrawTeamTokens"
      | "withdrawTokensToBurn"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlacklistStatusUpdated"
      | "FundingAdded"
      | "GrowthTokensWithdrawn"
      | "HyaxTokenAddressUpdated"
      | "Initialized"
      | "LogSenderAndOrigin"
      | "MaximumBatchSizeForUpdateRewardsUpdated"
      | "OwnershipTransferred"
      | "Paused"
      | "RewardTokensWithdrawn"
      | "RewardUpdateBatchSent"
      | "RewardUpdateFailed"
      | "RewardUpdateSuccess"
      | "RewardsUpdaterAddressUpdated"
      | "TeamMemberTokensRecovered"
      | "TeamTokensWithdrawn"
      | "TokensToBurnWithdrawn"
      | "Unpaused"
      | "WalletAddedToWhitelist"
      | "WhiteListerAddressUpdated"
      | "WhitelistStatusUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "GROWTH_TOKENS_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_INTERVAL_FOR_UPDATE_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKENS_PER_WEEK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKENS_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_TOKENS_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_TOKENS_LOCKED_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_TOKENS_TOTAL",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TEAM_TOKENS_WITHDRAWAL_PER_YEAR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKENS_WITHDRAWAL_PERIOD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWalletToWhitelist",
    values: [AddressLike, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYearForTeamTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundSmartContract",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensFunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensFundingStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensInSmartContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensLastWithdrawalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensStartFundingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "growthTokensWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "hyaxToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hyaxTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "maximumBatchSizeForUpdateRewards",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverTeamTokens",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensDistributed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensFunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensFundingStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensInSmartContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensStartFundingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardTokensWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardsUpdaterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensFunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensFundingStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensInSmartContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensStartFundingTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "teamTokensWithdrawn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBlacklistStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updateHyaxTokenAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumBatchSizeForUpdateRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardsBatch",
    values: [AddressLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardsSingle",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewardsUpdaterAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhiteListerAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWhitelistStatus",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "wallets",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawGrowthTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewardTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTeamTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTokensToBurn",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "GROWTH_TOKENS_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_INTERVAL_FOR_UPDATE_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKENS_PER_WEEK",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKENS_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_TOKENS_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_TOKENS_LOCKED_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_TOKENS_TOTAL",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TEAM_TOKENS_WITHDRAWAL_PER_YEAR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKENS_WITHDRAWAL_PERIOD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWalletToWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYearForTeamTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensFundingStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensInSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensLastWithdrawalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensStartFundingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "growthTokensWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hyaxToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hyaxTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "maximumBatchSizeForUpdateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverTeamTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensDistributed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensFundingStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensInSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensStartFundingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardTokensWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardsUpdaterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensFunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensFundingStarted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensInSmartContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensStartFundingTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "teamTokensWithdrawn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlacklistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateHyaxTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumBatchSizeForUpdateRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardsBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardsSingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewardsUpdaterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhiteListerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "wallets", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGrowthTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewardTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTeamTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTokensToBurn",
    data: BytesLike
  ): Result;
}

export namespace BlacklistStatusUpdatedEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddress: AddressLike,
    _newStatus: boolean
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddress: string,
    _newStatus: boolean
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FundingAddedEvent {
  export type InputTuple = [_fundingType: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_fundingType: bigint, _amount: bigint];
  export interface OutputObject {
    _fundingType: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GrowthTokensWithdrawnEvent {
  export type InputTuple = [_walletAddress: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_walletAddress: string, _amount: bigint];
  export interface OutputObject {
    _walletAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace HyaxTokenAddressUpdatedEvent {
  export type InputTuple = [_hyaxTokenAddress: AddressLike];
  export type OutputTuple = [_hyaxTokenAddress: string];
  export interface OutputObject {
    _hyaxTokenAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogSenderAndOriginEvent {
  export type InputTuple = [_sender: AddressLike, _origin: AddressLike];
  export type OutputTuple = [_sender: string, _origin: string];
  export interface OutputObject {
    _sender: string;
    _origin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MaximumBatchSizeForUpdateRewardsUpdatedEvent {
  export type InputTuple = [_maximumBatchSizeForUpdateRewards: BigNumberish];
  export type OutputTuple = [_maximumBatchSizeForUpdateRewards: bigint];
  export interface OutputObject {
    _maximumBatchSizeForUpdateRewards: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardTokensWithdrawnEvent {
  export type InputTuple = [_walletAddress: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_walletAddress: string, _amount: bigint];
  export interface OutputObject {
    _walletAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardUpdateBatchSentEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddresses: AddressLike[],
    _hyaxRewards: BigNumberish[]
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddresses: string[],
    _hyaxRewards: bigint[]
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddresses: string[];
    _hyaxRewards: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardUpdateFailedEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddress: AddressLike,
    _errorMessage: string
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddress: string,
    _errorMessage: string
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
    _errorMessage: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardUpdateSuccessEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddress: AddressLike,
    _hyaxReward: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddress: string,
    _hyaxReward: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
    _hyaxReward: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsUpdaterAddressUpdatedEvent {
  export type InputTuple = [_rewardsUpdaterAddress: AddressLike];
  export type OutputTuple = [_rewardsUpdaterAddress: string];
  export interface OutputObject {
    _rewardsUpdaterAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamMemberTokensRecoveredEvent {
  export type InputTuple = [
    _oldTeamMemberWalletAddress: AddressLike,
    _newTeamMemberWalletAddress: AddressLike,
    _hyaxHoldingAmount: BigNumberish,
    _currentRewardsAmount: BigNumberish
  ];
  export type OutputTuple = [
    _oldTeamMemberWalletAddress: string,
    _newTeamMemberWalletAddress: string,
    _hyaxHoldingAmount: bigint,
    _currentRewardsAmount: bigint
  ];
  export interface OutputObject {
    _oldTeamMemberWalletAddress: string;
    _newTeamMemberWalletAddress: string;
    _hyaxHoldingAmount: bigint;
    _currentRewardsAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TeamTokensWithdrawnEvent {
  export type InputTuple = [_walletAddress: AddressLike, _amount: BigNumberish];
  export type OutputTuple = [_walletAddress: string, _amount: bigint];
  export interface OutputObject {
    _walletAddress: string;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensToBurnWithdrawnEvent {
  export type InputTuple = [_fundingType: BigNumberish, _amount: BigNumberish];
  export type OutputTuple = [_fundingType: bigint, _amount: bigint];
  export interface OutputObject {
    _fundingType: bigint;
    _amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletAddedToWhitelistEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddress: AddressLike,
    _isTeamWallet: boolean,
    _hyaxHoldingAmount: BigNumberish
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddress: string,
    _isTeamWallet: boolean,
    _hyaxHoldingAmount: bigint
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
    _isTeamWallet: boolean;
    _hyaxHoldingAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhiteListerAddressUpdatedEvent {
  export type InputTuple = [_whiteListerAddress: AddressLike];
  export type OutputTuple = [_whiteListerAddress: string];
  export interface OutputObject {
    _whiteListerAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WhitelistStatusUpdatedEvent {
  export type InputTuple = [
    _sender: AddressLike,
    _walletAddress: AddressLike,
    _newStatus: boolean
  ];
  export type OutputTuple = [
    _sender: string,
    _walletAddress: string,
    _newStatus: boolean
  ];
  export interface OutputObject {
    _sender: string;
    _walletAddress: string;
    _newStatus: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface UpgradeableHYAXRewards extends BaseContract {
  connect(runner?: ContractRunner | null): UpgradeableHYAXRewards;
  waitForDeployment(): Promise<this>;

  interface: UpgradeableHYAXRewardsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  GROWTH_TOKENS_TOTAL: TypedContractMethod<[], [bigint], "view">;

  GROWTH_TOKENS_WITHDRAWAL_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  MIN_INTERVAL_FOR_UPDATE_REWARDS: TypedContractMethod<[], [bigint], "view">;

  REWARD_TOKENS_PER_WEEK: TypedContractMethod<[], [bigint], "view">;

  REWARD_TOKENS_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  REWARD_TOKENS_TOTAL: TypedContractMethod<[], [bigint], "view">;

  TEAM_TOKENS_LOCKED_PERIOD: TypedContractMethod<[], [bigint], "view">;

  TEAM_TOKENS_TOTAL: TypedContractMethod<[], [bigint], "view">;

  TEAM_TOKENS_WITHDRAWAL_PER_YEAR: TypedContractMethod<[], [bigint], "view">;

  TOKENS_WITHDRAWAL_PERIOD: TypedContractMethod<[], [bigint], "view">;

  addWalletToWhitelist: TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _isTeamWallet: boolean,
      _hyaxHoldingAmountAtWhitelistTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  calculateYearForTeamTokens: TypedContractMethod<[], [bigint], "view">;

  fundSmartContract: TypedContractMethod<
    [_fundingType: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  growthTokensFunded: TypedContractMethod<[], [bigint], "view">;

  growthTokensFundingStarted: TypedContractMethod<[], [boolean], "view">;

  growthTokensInSmartContract: TypedContractMethod<[], [bigint], "view">;

  growthTokensLastWithdrawalTime: TypedContractMethod<[], [bigint], "view">;

  growthTokensStartFundingTime: TypedContractMethod<[], [bigint], "view">;

  growthTokensWithdrawn: TypedContractMethod<[], [bigint], "view">;

  hyaxToken: TypedContractMethod<[], [string], "view">;

  hyaxTokenAddress: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [_hyaxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  maximumBatchSizeForUpdateRewards: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recoverTeamTokens: TypedContractMethod<
    [
      _oldTeamMemberWalletAddress: AddressLike,
      _newTeamMemberWalletAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  rewardTokensDistributed: TypedContractMethod<[], [bigint], "view">;

  rewardTokensFunded: TypedContractMethod<[], [bigint], "view">;

  rewardTokensFundingStarted: TypedContractMethod<[], [boolean], "view">;

  rewardTokensInSmartContract: TypedContractMethod<[], [bigint], "view">;

  rewardTokensStartFundingTime: TypedContractMethod<[], [bigint], "view">;

  rewardTokensWithdrawn: TypedContractMethod<[], [bigint], "view">;

  rewardsUpdaterAddress: TypedContractMethod<[], [string], "view">;

  teamTokensFunded: TypedContractMethod<[], [bigint], "view">;

  teamTokensFundingStarted: TypedContractMethod<[], [boolean], "view">;

  teamTokensInSmartContract: TypedContractMethod<[], [bigint], "view">;

  teamTokensStartFundingTime: TypedContractMethod<[], [bigint], "view">;

  teamTokensWithdrawn: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateBlacklistStatus: TypedContractMethod<
    [_walletAddress: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;

  updateHyaxTokenAddress: TypedContractMethod<
    [_hyaxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMaximumBatchSizeForUpdateRewards: TypedContractMethod<
    [_maximumBatchSizeForUpdateRewards: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRewardsBatch: TypedContractMethod<
    [_walletAddresses: AddressLike[], _hyaxRewards: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  updateRewardsSingle: TypedContractMethod<
    [_walletAddress: AddressLike, _hyaxRewards: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateRewardsUpdaterAddress: TypedContractMethod<
    [_rewardsUpdaterAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateWhiteListerAddress: TypedContractMethod<
    [_whiteListerAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateWhitelistStatus: TypedContractMethod<
    [_walletAddress: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;

  wallets: TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        hyaxHoldingAmount: bigint;
        hyaxHoldingAmountAtWhitelistTime: bigint;
        totalHyaxRewardsAmount: bigint;
        currentRewardsAmount: bigint;
        rewardsWithdrawn: bigint;
        addedToWhitelistTime: bigint;
        teamTokenWithdrawalTimes: bigint;
        lastRewardsWithdrawalTime: bigint;
        lastRewardsUpdateTime: bigint;
        isTeamWallet: boolean;
        isWhitelisted: boolean;
        isBlacklisted: boolean;
      }
    ],
    "view"
  >;

  whiteListerAddress: TypedContractMethod<[], [string], "view">;

  withdrawGrowthTokens: TypedContractMethod<[], [void], "nonpayable">;

  withdrawRewardTokens: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTeamTokens: TypedContractMethod<[], [void], "nonpayable">;

  withdrawTokensToBurn: TypedContractMethod<
    [_fundingType: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "GROWTH_TOKENS_TOTAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "GROWTH_TOKENS_WITHDRAWAL_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_INTERVAL_FOR_UPDATE_REWARDS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_TOKENS_PER_WEEK"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_TOKENS_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "REWARD_TOKENS_TOTAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEAM_TOKENS_LOCKED_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEAM_TOKENS_TOTAL"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TEAM_TOKENS_WITHDRAWAL_PER_YEAR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "TOKENS_WITHDRAWAL_PERIOD"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "addWalletToWhitelist"
  ): TypedContractMethod<
    [
      _walletAddress: AddressLike,
      _isTeamWallet: boolean,
      _hyaxHoldingAmountAtWhitelistTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateYearForTeamTokens"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "fundSmartContract"
  ): TypedContractMethod<
    [_fundingType: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "growthTokensFunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensFundingStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "growthTokensInSmartContract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensLastWithdrawalTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensStartFundingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "growthTokensWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "hyaxToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "hyaxTokenAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [_hyaxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "maximumBatchSizeForUpdateRewards"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recoverTeamTokens"
  ): TypedContractMethod<
    [
      _oldTeamMemberWalletAddress: AddressLike,
      _newTeamMemberWalletAddress: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "rewardTokensDistributed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokensFunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokensFundingStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "rewardTokensInSmartContract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokensStartFundingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardTokensWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "rewardsUpdaterAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "teamTokensFunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamTokensFundingStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "teamTokensInSmartContract"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamTokensStartFundingTime"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "teamTokensWithdrawn"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBlacklistStatus"
  ): TypedContractMethod<
    [_walletAddress: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateHyaxTokenAddress"
  ): TypedContractMethod<
    [_hyaxTokenAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMaximumBatchSizeForUpdateRewards"
  ): TypedContractMethod<
    [_maximumBatchSizeForUpdateRewards: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRewardsBatch"
  ): TypedContractMethod<
    [_walletAddresses: AddressLike[], _hyaxRewards: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRewardsSingle"
  ): TypedContractMethod<
    [_walletAddress: AddressLike, _hyaxRewards: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRewardsUpdaterAddress"
  ): TypedContractMethod<
    [_rewardsUpdaterAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWhiteListerAddress"
  ): TypedContractMethod<
    [_whiteListerAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateWhitelistStatus"
  ): TypedContractMethod<
    [_walletAddress: AddressLike, _newStatus: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wallets"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        boolean,
        boolean
      ] & {
        hyaxHoldingAmount: bigint;
        hyaxHoldingAmountAtWhitelistTime: bigint;
        totalHyaxRewardsAmount: bigint;
        currentRewardsAmount: bigint;
        rewardsWithdrawn: bigint;
        addedToWhitelistTime: bigint;
        teamTokenWithdrawalTimes: bigint;
        lastRewardsWithdrawalTime: bigint;
        lastRewardsUpdateTime: bigint;
        isTeamWallet: boolean;
        isWhitelisted: boolean;
        isBlacklisted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "whiteListerAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawGrowthTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRewardTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTeamTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawTokensToBurn"
  ): TypedContractMethod<
    [_fundingType: BigNumberish, _amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BlacklistStatusUpdated"
  ): TypedContractEvent<
    BlacklistStatusUpdatedEvent.InputTuple,
    BlacklistStatusUpdatedEvent.OutputTuple,
    BlacklistStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FundingAdded"
  ): TypedContractEvent<
    FundingAddedEvent.InputTuple,
    FundingAddedEvent.OutputTuple,
    FundingAddedEvent.OutputObject
  >;
  getEvent(
    key: "GrowthTokensWithdrawn"
  ): TypedContractEvent<
    GrowthTokensWithdrawnEvent.InputTuple,
    GrowthTokensWithdrawnEvent.OutputTuple,
    GrowthTokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "HyaxTokenAddressUpdated"
  ): TypedContractEvent<
    HyaxTokenAddressUpdatedEvent.InputTuple,
    HyaxTokenAddressUpdatedEvent.OutputTuple,
    HyaxTokenAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LogSenderAndOrigin"
  ): TypedContractEvent<
    LogSenderAndOriginEvent.InputTuple,
    LogSenderAndOriginEvent.OutputTuple,
    LogSenderAndOriginEvent.OutputObject
  >;
  getEvent(
    key: "MaximumBatchSizeForUpdateRewardsUpdated"
  ): TypedContractEvent<
    MaximumBatchSizeForUpdateRewardsUpdatedEvent.InputTuple,
    MaximumBatchSizeForUpdateRewardsUpdatedEvent.OutputTuple,
    MaximumBatchSizeForUpdateRewardsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RewardTokensWithdrawn"
  ): TypedContractEvent<
    RewardTokensWithdrawnEvent.InputTuple,
    RewardTokensWithdrawnEvent.OutputTuple,
    RewardTokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "RewardUpdateBatchSent"
  ): TypedContractEvent<
    RewardUpdateBatchSentEvent.InputTuple,
    RewardUpdateBatchSentEvent.OutputTuple,
    RewardUpdateBatchSentEvent.OutputObject
  >;
  getEvent(
    key: "RewardUpdateFailed"
  ): TypedContractEvent<
    RewardUpdateFailedEvent.InputTuple,
    RewardUpdateFailedEvent.OutputTuple,
    RewardUpdateFailedEvent.OutputObject
  >;
  getEvent(
    key: "RewardUpdateSuccess"
  ): TypedContractEvent<
    RewardUpdateSuccessEvent.InputTuple,
    RewardUpdateSuccessEvent.OutputTuple,
    RewardUpdateSuccessEvent.OutputObject
  >;
  getEvent(
    key: "RewardsUpdaterAddressUpdated"
  ): TypedContractEvent<
    RewardsUpdaterAddressUpdatedEvent.InputTuple,
    RewardsUpdaterAddressUpdatedEvent.OutputTuple,
    RewardsUpdaterAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "TeamMemberTokensRecovered"
  ): TypedContractEvent<
    TeamMemberTokensRecoveredEvent.InputTuple,
    TeamMemberTokensRecoveredEvent.OutputTuple,
    TeamMemberTokensRecoveredEvent.OutputObject
  >;
  getEvent(
    key: "TeamTokensWithdrawn"
  ): TypedContractEvent<
    TeamTokensWithdrawnEvent.InputTuple,
    TeamTokensWithdrawnEvent.OutputTuple,
    TeamTokensWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "TokensToBurnWithdrawn"
  ): TypedContractEvent<
    TokensToBurnWithdrawnEvent.InputTuple,
    TokensToBurnWithdrawnEvent.OutputTuple,
    TokensToBurnWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;
  getEvent(
    key: "WalletAddedToWhitelist"
  ): TypedContractEvent<
    WalletAddedToWhitelistEvent.InputTuple,
    WalletAddedToWhitelistEvent.OutputTuple,
    WalletAddedToWhitelistEvent.OutputObject
  >;
  getEvent(
    key: "WhiteListerAddressUpdated"
  ): TypedContractEvent<
    WhiteListerAddressUpdatedEvent.InputTuple,
    WhiteListerAddressUpdatedEvent.OutputTuple,
    WhiteListerAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "WhitelistStatusUpdated"
  ): TypedContractEvent<
    WhitelistStatusUpdatedEvent.InputTuple,
    WhitelistStatusUpdatedEvent.OutputTuple,
    WhitelistStatusUpdatedEvent.OutputObject
  >;

  filters: {
    "BlacklistStatusUpdated(address,address,bool)": TypedContractEvent<
      BlacklistStatusUpdatedEvent.InputTuple,
      BlacklistStatusUpdatedEvent.OutputTuple,
      BlacklistStatusUpdatedEvent.OutputObject
    >;
    BlacklistStatusUpdated: TypedContractEvent<
      BlacklistStatusUpdatedEvent.InputTuple,
      BlacklistStatusUpdatedEvent.OutputTuple,
      BlacklistStatusUpdatedEvent.OutputObject
    >;

    "FundingAdded(uint8,uint256)": TypedContractEvent<
      FundingAddedEvent.InputTuple,
      FundingAddedEvent.OutputTuple,
      FundingAddedEvent.OutputObject
    >;
    FundingAdded: TypedContractEvent<
      FundingAddedEvent.InputTuple,
      FundingAddedEvent.OutputTuple,
      FundingAddedEvent.OutputObject
    >;

    "GrowthTokensWithdrawn(address,uint256)": TypedContractEvent<
      GrowthTokensWithdrawnEvent.InputTuple,
      GrowthTokensWithdrawnEvent.OutputTuple,
      GrowthTokensWithdrawnEvent.OutputObject
    >;
    GrowthTokensWithdrawn: TypedContractEvent<
      GrowthTokensWithdrawnEvent.InputTuple,
      GrowthTokensWithdrawnEvent.OutputTuple,
      GrowthTokensWithdrawnEvent.OutputObject
    >;

    "HyaxTokenAddressUpdated(address)": TypedContractEvent<
      HyaxTokenAddressUpdatedEvent.InputTuple,
      HyaxTokenAddressUpdatedEvent.OutputTuple,
      HyaxTokenAddressUpdatedEvent.OutputObject
    >;
    HyaxTokenAddressUpdated: TypedContractEvent<
      HyaxTokenAddressUpdatedEvent.InputTuple,
      HyaxTokenAddressUpdatedEvent.OutputTuple,
      HyaxTokenAddressUpdatedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LogSenderAndOrigin(address,address)": TypedContractEvent<
      LogSenderAndOriginEvent.InputTuple,
      LogSenderAndOriginEvent.OutputTuple,
      LogSenderAndOriginEvent.OutputObject
    >;
    LogSenderAndOrigin: TypedContractEvent<
      LogSenderAndOriginEvent.InputTuple,
      LogSenderAndOriginEvent.OutputTuple,
      LogSenderAndOriginEvent.OutputObject
    >;

    "MaximumBatchSizeForUpdateRewardsUpdated(uint8)": TypedContractEvent<
      MaximumBatchSizeForUpdateRewardsUpdatedEvent.InputTuple,
      MaximumBatchSizeForUpdateRewardsUpdatedEvent.OutputTuple,
      MaximumBatchSizeForUpdateRewardsUpdatedEvent.OutputObject
    >;
    MaximumBatchSizeForUpdateRewardsUpdated: TypedContractEvent<
      MaximumBatchSizeForUpdateRewardsUpdatedEvent.InputTuple,
      MaximumBatchSizeForUpdateRewardsUpdatedEvent.OutputTuple,
      MaximumBatchSizeForUpdateRewardsUpdatedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RewardTokensWithdrawn(address,uint256)": TypedContractEvent<
      RewardTokensWithdrawnEvent.InputTuple,
      RewardTokensWithdrawnEvent.OutputTuple,
      RewardTokensWithdrawnEvent.OutputObject
    >;
    RewardTokensWithdrawn: TypedContractEvent<
      RewardTokensWithdrawnEvent.InputTuple,
      RewardTokensWithdrawnEvent.OutputTuple,
      RewardTokensWithdrawnEvent.OutputObject
    >;

    "RewardUpdateBatchSent(address,address[],uint256[])": TypedContractEvent<
      RewardUpdateBatchSentEvent.InputTuple,
      RewardUpdateBatchSentEvent.OutputTuple,
      RewardUpdateBatchSentEvent.OutputObject
    >;
    RewardUpdateBatchSent: TypedContractEvent<
      RewardUpdateBatchSentEvent.InputTuple,
      RewardUpdateBatchSentEvent.OutputTuple,
      RewardUpdateBatchSentEvent.OutputObject
    >;

    "RewardUpdateFailed(address,address,string)": TypedContractEvent<
      RewardUpdateFailedEvent.InputTuple,
      RewardUpdateFailedEvent.OutputTuple,
      RewardUpdateFailedEvent.OutputObject
    >;
    RewardUpdateFailed: TypedContractEvent<
      RewardUpdateFailedEvent.InputTuple,
      RewardUpdateFailedEvent.OutputTuple,
      RewardUpdateFailedEvent.OutputObject
    >;

    "RewardUpdateSuccess(address,address,uint256)": TypedContractEvent<
      RewardUpdateSuccessEvent.InputTuple,
      RewardUpdateSuccessEvent.OutputTuple,
      RewardUpdateSuccessEvent.OutputObject
    >;
    RewardUpdateSuccess: TypedContractEvent<
      RewardUpdateSuccessEvent.InputTuple,
      RewardUpdateSuccessEvent.OutputTuple,
      RewardUpdateSuccessEvent.OutputObject
    >;

    "RewardsUpdaterAddressUpdated(address)": TypedContractEvent<
      RewardsUpdaterAddressUpdatedEvent.InputTuple,
      RewardsUpdaterAddressUpdatedEvent.OutputTuple,
      RewardsUpdaterAddressUpdatedEvent.OutputObject
    >;
    RewardsUpdaterAddressUpdated: TypedContractEvent<
      RewardsUpdaterAddressUpdatedEvent.InputTuple,
      RewardsUpdaterAddressUpdatedEvent.OutputTuple,
      RewardsUpdaterAddressUpdatedEvent.OutputObject
    >;

    "TeamMemberTokensRecovered(address,address,uint256,uint256)": TypedContractEvent<
      TeamMemberTokensRecoveredEvent.InputTuple,
      TeamMemberTokensRecoveredEvent.OutputTuple,
      TeamMemberTokensRecoveredEvent.OutputObject
    >;
    TeamMemberTokensRecovered: TypedContractEvent<
      TeamMemberTokensRecoveredEvent.InputTuple,
      TeamMemberTokensRecoveredEvent.OutputTuple,
      TeamMemberTokensRecoveredEvent.OutputObject
    >;

    "TeamTokensWithdrawn(address,uint256)": TypedContractEvent<
      TeamTokensWithdrawnEvent.InputTuple,
      TeamTokensWithdrawnEvent.OutputTuple,
      TeamTokensWithdrawnEvent.OutputObject
    >;
    TeamTokensWithdrawn: TypedContractEvent<
      TeamTokensWithdrawnEvent.InputTuple,
      TeamTokensWithdrawnEvent.OutputTuple,
      TeamTokensWithdrawnEvent.OutputObject
    >;

    "TokensToBurnWithdrawn(uint8,uint256)": TypedContractEvent<
      TokensToBurnWithdrawnEvent.InputTuple,
      TokensToBurnWithdrawnEvent.OutputTuple,
      TokensToBurnWithdrawnEvent.OutputObject
    >;
    TokensToBurnWithdrawn: TypedContractEvent<
      TokensToBurnWithdrawnEvent.InputTuple,
      TokensToBurnWithdrawnEvent.OutputTuple,
      TokensToBurnWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;

    "WalletAddedToWhitelist(address,address,bool,uint256)": TypedContractEvent<
      WalletAddedToWhitelistEvent.InputTuple,
      WalletAddedToWhitelistEvent.OutputTuple,
      WalletAddedToWhitelistEvent.OutputObject
    >;
    WalletAddedToWhitelist: TypedContractEvent<
      WalletAddedToWhitelistEvent.InputTuple,
      WalletAddedToWhitelistEvent.OutputTuple,
      WalletAddedToWhitelistEvent.OutputObject
    >;

    "WhiteListerAddressUpdated(address)": TypedContractEvent<
      WhiteListerAddressUpdatedEvent.InputTuple,
      WhiteListerAddressUpdatedEvent.OutputTuple,
      WhiteListerAddressUpdatedEvent.OutputObject
    >;
    WhiteListerAddressUpdated: TypedContractEvent<
      WhiteListerAddressUpdatedEvent.InputTuple,
      WhiteListerAddressUpdatedEvent.OutputTuple,
      WhiteListerAddressUpdatedEvent.OutputObject
    >;

    "WhitelistStatusUpdated(address,address,bool)": TypedContractEvent<
      WhitelistStatusUpdatedEvent.InputTuple,
      WhitelistStatusUpdatedEvent.OutputTuple,
      WhitelistStatusUpdatedEvent.OutputObject
    >;
    WhitelistStatusUpdated: TypedContractEvent<
      WhitelistStatusUpdatedEvent.InputTuple,
      WhitelistStatusUpdatedEvent.OutputTuple,
      WhitelistStatusUpdatedEvent.OutputObject
    >;
  };
}
