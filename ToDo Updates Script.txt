D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards

22. Update updates script

npx hardhat run scripts/updateWeeklyRewards.ts

Updates are made based on the tokens of a week ago. 
Create script that interacts with local version and optimize it.

Updater wallet address:  0x01c2f012de19e6436744c3F81f56E9e70C93a8C3
Rewards smart contract: 0x391f57D9E044599aC4d7A3a340f7343c98824D41


Investor wallets
0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1 100 WBTC Approved 1 WBTC Transfered
0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4 100 WBTC Approved 3 WBTC Transfered
0x34795B6a05543Fe097C8BbBc221e3119f27B793E 100 WBTC Approved 5 WBTC Transfered
0xb44e0C06718534F27847e607B6AE9368798fB974 100 WBTC Approved 10 WBTC Transfered
0xEDfcDEf54AE487Bd2F49e88E5b447cC26eB48e47 100 WBTC Approved 7 WBTC Transfered

---
Team wallets
0x350441F8a82680a785FFA9d3EfEa60BB4cA417f8 3000000000000000000000000 3M HYAX 100 WBTC
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3 2000000000000000000000000 2M HYAX
0x7dE9a234E67b9Ac172c803555f5aA7fFf3DB5581 5000000000000000000000000 5M HYAX


22.1. Find out why is the current script failing. The transaction is just reverting. DONE

Use transaction simulator
https://docs.alchemy.com/reference/simulateexecution-sdk-v3

Answer: The reason is I've been using a version with bugs of the smart contract. I need to deply a new one.


22.2. Deploy realistic local environment of upgradeable token contract

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Token

npx hardhat node

npx hardhat run --network localhost scripts\deploy_local_token_environment.js

22.2.1. Deploy local upgradeable token contract DONE
22.2.2. Change ownership from deployer to owner DONE
22.2.3. Send minted HYAX tokens from owner wallet to the smart contract DONE
22.2.4. Update whitelister and treasury address DONE
22.2.5. Update price data feeds DONE
22.2.6. Update crypto token address DONE
22.2.7. Add 5 investor wallets to whitelist and qualified investor list DONE
22.2.8. Approve transaction from native token to the smart contract  DONE
22.2.9. Use the smart contract to buy the tokens for each address DONE
22.2.10. Clean and order that script DONE

22.3. Deploy realistic local environment of upgradeable rewards contract DONE

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards

npx hardhat run --network localhost scripts\deploy_local_rewards_environment.ts

22.3.1. Get the address and ABI of the token contract stored in files DONE
22.3.2. Deploy upgradeable rewards token contract DONE
22.3.3. Change ownership from deployer to owner DONE
22.3.4. Update whitelister and rewards updater DONE
22.3.5. Mint more tokens from the token contract to provide to a the 3 funding type DONE
22.3.6. Fund contract with the 3 types of funding rewards. Don't forget to approve! DONE

Add 5 investor wallets DONE

Add 3 team wallets with tokens DONE

22.4. Create everything required to launch the whole environment with just running a command DONE


22.5. Create local version of upgradeable script 

22.5.1. Show reward balances of team and non team wallets in smart contract DONE

22.5.2. Automate distribution of rewards every 5 seconds DONE

22.5.3. Create scripts that simulate executing an upgrade and executing other functions (like withdraw tokens and whitelisting) with just a command DONE

CONTINUE HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE


22.5.4. Make the script based on last week token holdings. FIX THE ERROR RELATED TO THE BLOCKS AND TIMESTAMP

22.5.5. Clean and optimize the local upgrades script 

22.5.6. Create the testnet version of the upgrades script 

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards

npx hardhat run --network localhost scripts\update_local_weekly_rewards.ts

npx hardhat run --network localhost scripts\transaction_local_rewards_contract.ts



GOAL TODAY: UP TO HERE-------------------------------

22.6. Transaction optimization? https://docs.alchemy.com/reference/alchemy-sendgasoptimizedtransaction


Optimize the following typescript, ethers.js V6 and hardhat code as much as you can, reducing the code as much as you can WITHOUT AFFECTING THE UNDERLYING FUNCTIONALITY AT ALL. Also add detailed inline comments expaining the code:



