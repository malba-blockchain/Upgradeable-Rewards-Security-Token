Goal: Deploy Upgradeable HYAX Rewards Token

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards

---------------DONE---------------

0. Recap the functionalities and requirements 

1. Create a Test-Driven Development plan

2. Set up full dev environment DONE

---------INITIAL HARDHAT SETUP---------

npm init -y

npm install --save-dev hardhat

npx hardhat init

Create an empty hardhat.config.js

npm install --save-dev @nomicfoundation/hardhat-toolbox

npm install --save-dev hardhat

npm install --save-dev @nomicfoundation/hardhat-ethers ethers

npm install --save-dev @openzeppelin/hardhat-upgrades

npm install --save-dev @nomicfoundation/hardhat-network-helpers

npm install --save dotenv

npm install --save-dev chai@4.3.7

npm install @openzeppelin/contracts

3. Create tests code DONE

---------EXECUTE LOCAL TESTS---------

npm i hardhat-gas-reporter

npx hardhat test


4. Create growth tokens functionalities DONE


---------------ToDo---------------

5. Create teams tokens functionalities

5.1. Add variables DONE

5.2. Add fuding method uptades DONE

5.3. Add withdraw method

5.4. Test team tokens functionalities
-addWalletToWhitelist
--not owner nor whitelister DONE
--as owner DONE
--as whitelister DONE
--same wallet (already added) DONE
--invalid data (wallet address, isTeamWallet, _bitcoinRewardsAddress, _hyaxHoldingAmount) DONE

-removeWalletFromWhitelist
--not owner nor whitelister DONE 
--as owner DONE 
--as whitelister DONE
-already removed DONE


-fundSmartContract (team tokens) DONE
-fund smart contract (team tokens) after funding first time DONE
-TEST for funding upper limits for team and growth tokens GROWTH_TOKENS_TOTAL, TEAM_TOKENS_TOTAL DONE
-first exceeding the limit - revert DONE
-first exactly the limit - approve DONE
-second exceeding the limit DONE


-withdrawTeamTokens DONE
--before being funded DONE
--not in whitelist DONE
--notteammember DONE
--after being funded but beforethe4years DONE
--after4years have passed and it was funded (check all variables) DONE
--before1yearafterfirstwithdraw (you need a way to track the initial tokens in the wallet vs the current tokens) DONE
--afterAYearHasPassedSinceLastWithdrawal DONE
--revertAfterWithdrawingAllTeamTokens DONE
--revertAfterWithdrawingAllOwnTokens DONE
--Print the values of times and token balances DONE


6. Create holder rewards functionalities

address rewardsUpdater DONE

event rewards withdrawn  DONE

variables DONE

fundRewards DONE

updateRewardsUpdaterAddress() DONE

Update the data one by uploading the info or by doing the calculation in the code?


updateValuesOfTokenRewards(mapping rewards (address investorAddress â€“> uint256 rewardAmount))

1. Batch Size Limit: Introduce a limit on the maximum number of wallet addresses that can be updated in a single transaction. This prevents gas exhaustion in case too many addresses are passed. DONE
2. Timestamp Validation: Check whether enough time has passed since the last rewards update. For example, rewards might only be allowed to be updated weekly, so check that the minimum time (7 days) has elapsed. DONE
3. Reentrancy Guard: Add a reentrancy guard to protect against malicious external calls. DONE
4. Hyax Balance Check:  Ensure that the wallet has a non-zero HYAX balance before proceeding to update its rewards. This avoids unnecessary operations on wallets with zero balances. DONE
5. Token Balance Consistency: Before updating the rewards, verify that the contract has enough tokens to distribute rewards based on the current weekly distribution formula. This prevents scenarios where the contract might not have sufficient tokens to cover all wallets. TODO
6. Whitelist Validation: Ensure that the correct event (RewardsUpdated) is emitted only after the state changes are successfully applied. This helps maintain an accurate on-chain history of updates. DONE
7. Ensure that the _walletAddresses array contains unique addresses to prevent duplicate updates.TODO
8. Validate that the _hyaxHoldingAmounts array contains non-negative values. DONE
9. Provide informative error messages to help developers debug issues and identify potential vulnerabilities. DONE


withdrawTokenRewards() DONE

7. Create additional functionalities for smart contract

withdrawTokensToBurn() DONE


8. Add requirement updates. 

8.1. There is a single date for team people to withdraw their tokens.
-Admin sends tokens to smart contract
-A timer starts to count the time once the tokens are sent
-There is a function that returns the year based on the current date: e.g. 1, 2, 3, ...
-Each team member stores the amount of times the extracted their team tokens: e.g. 1, 2, 3, 4
-To withdraw tokens the condition must be met: 
The value of the variable of the team member must be less to the number of the year.

-Tries to withdraw before the first year DONE
-Tries to withdraw two times after the first year DONE
-Tries to withdraw two times after the second year DONE
-Tries to withdraw five times after the fifth year DONE
-Tries to withdraw six times after the fith year DONE

8.2. Transparency goal: A part of the tokens could be sent to an options pool wallet. OK

8.3. Token rewards can be extracted by people whenever they want DONE

8.4. There is an isBlacklisted parameter added to the smart contract data DONE

8.7. Update whitelist status DONE

8.8. Update blacklist status DONE


8.5. Bitcoin address WON'T be stored in the smart contract DONE

8.6. Max tokens a wallet can hold is maximum of total dedicated tokens DONE



9. Create external script for rewards

calculateWeeklyReward
Rewards are calculated based on snapshot taken from last week holdings
add all the tokens been holded by the investors and team members that have been whitelisted (m)
take the amount of tokens that the investor was holding last week (n)
divide (n)/(m) to get the pro-rata value that holder is entitled to (%)
multiply that value by the weekly token rewards
---

https://amoy.polygonscan.com/address/0x37db03be6e7e967e7925d508ebd57bdfee392d62#code

npx hardhat run scripts/updateWeeklyRewards.ts


9.1. Get the address and the abi of the smart contract DONE

9.2. Get the list of the smart contract token holders DONE

9.3. Query the blockchain for last week holdings of investors CURRENTLY whitelisted DONE

Query the blockchain for last week holdings of team members CURRENTLY whitelisted

9.4. Add all the holdings up. DONE

9.5. Create a mapping of addresses and values DONE

the amount of the reward is the amount of tokens that the investor was holding last week (n) / the tokens been holded by the investors and team members that have been whitelisted (m)

Store the amount of weekly reward in the array/mapping DONE

Add up all the rewards to distribute and check is less than the smart contract value REWARD_TOKENS_PER_WEEK DONE

9.6. Create a batch transaction by 20 and send it 

-Launch HYAX smart contract for tokens DONE
-Distribute tokens among 5 investor wallets. And 3 team wallets.
--Send HYAX to smart contract
--Add investor to whitelist
--Approve transfer from buyer token


Investor wallets
0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1 100 WBTC Approved 1 WBTC Transfered
0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4 100 WBTC Approved 3 WBTC Transfered
0x34795B6a05543Fe097C8BbBc221e3119f27B793E 100 WBTC Approved 5 WBTC Transfered
0xb44e0C06718534F27847e607B6AE9368798fB974 100 WBTC Approved 10 WBTC Transfered
0xEDfcDEf54AE487Bd2F49e88E5b447cC26eB48e47 100 WBTC Approved 7 WBTC Transfered

---
Team wallets
0x350441F8a82680a785FFA9d3EfEa60BB4cA417f8 3000000000000000000000000 3M HYAX 100 WBTC
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3 2000000000000000000000000 2M HYAX
0x7dE9a234E67b9Ac172c803555f5aA7fFf3DB5581 5000000000000000000000000 5M HYAX

---
Approve
0xCd1fA2C8626B023197158aC84C5DF56EDD1F3f0C Proxy
0x378a1DC6b11E1cfD1Bfd7183085dc0C79FCE1a47 Implementation
100000000000000000000 100 WBTC


-Launch rewards basic smart contract   
v1: 0x7B008f7a8d377A351d7934632128d738a2200cf8
v2: 0xcdd08884D34f2c6Ac7f6DB00D4eB50faAfbbb8F0
v3: 0x57ba336A233a9a1F1404f73Ce46F444618209a61
v4: 0x391f57D9E044599aC4d7A3a340f7343c98824D41

npx hardhat run --network polygonAmoy scripts/deploy_testnet_Rewards_contract.ts

npm install --save-dev @nomicfoundation/hardhat-verify

npx hardhat verify --network polygonAmoy 0x391f57D9E044599aC4d7A3a340f7343c98824D41 0xCd1fA2C8626B023197158aC84C5DF56EDD1F3f0C


-Set up rewards basic smart contract

500000000000000000000000000 500 M
1000000000000000000000000000 1B

--Update whitelister and rewards updater address DONE
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3
--Add team addresses to whitelist DONE
--Fund the rewards basic smart contract with tokens for the team. (GrowthTokens, TeamTokens, or RewardTokens) Can be by minting new tokens. DON'T FORGET TO APPROVE!DONE 
--Add investor wallets to whitelist of rewards contract


npx hardhat run scripts/updateWeeklyRewards.ts

-Create a single transaction for updates and send it 
--Set up connection to write to smart contract basic test like update whitelisteraddress 
--Setup single update transaction DONE
--Setup batch transaction 


CONTINUE HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

There is an error in the batch update. But the single update works perfectly. Perhaps the type of parameter?

I KNOW THE PROBLEM IS BECAUSE THE SMART CONTRACT IS TAKING THE CONTEXT OF THE SMART CONTRACT AND NOW HE IS THE MSG.SENDER INSTEAD OF THE OWNER OR REWARDS UPDATER.

YOU KNOW WHAT'S THE PROBLEM. SO DEPLOY A LOCAL TEST VERSION AND DEBUG THE SHIT OUT OF THAT SUCKER.

-Fund smart contract with reward tokens DONE
-Fund smart contract with reward tokens after having already funded the first time DONE
-updateRewardsSingle DONE
-updateRewardsBatch DONE

0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1 I  
0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4 I
0x34795B6a05543Fe097C8BbBc221e3119f27B793E I
0xb44e0C06718534F27847e607B6AE9368798fB974 I
0xEDfcDEf54AE487Bd2F49e88E5b447cC26eB48e47 I   Updated
0x350441F8a82680a785FFA9d3EfEa60BB4cA417f8 (T)
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3 (T)
0x7dE9a234E67b9Ac172c803555f5aA7fFf3DB5581 (T) Updated


10. Add all required tests based on what's left to test

FAIL CASES
If a single transaction update fails, everything fails. Make sure it executes everything right and the one that fails gets emited as event.

If the wallet gets updated from whitelist to false, its possible to add it again. Which shouldn't happen.


-withdrawRewardTokens
-calculateYearForTeamTokens
-withdrawTokensToBurn
-updateWhiteListerAddress
-updateRewardsUpdaterAddress
-updateHyaxTokenAddress
-pause
-unpause
-transferOwnership




---------INITIAL LOCAL DEPLOYMENT---------

npx hardhat node

npx hardhat compile --force

9. Create local upgradeable version

10. Create testnet upgradeable version


----------------------------

Using the following hardhat testing template, generate the following test cases for the "XXXXXXXXXXXXXXXXXXXXXXX", for the solidity smart contract: UpgradeableHYAXRewards.sol

----------------------------



