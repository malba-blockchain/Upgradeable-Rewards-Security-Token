Goal: Deploy Upgradeable HYAX Rewards Token

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards

---------------DONE---------------

0. Recap the functionalities and requirements 

1. Create a Test-Driven Development plan

2. Set up full dev environment DONE

---------INITIAL HARDHAT SETUP---------

npm init -y

npm install --save-dev hardhat

npx hardhat init

Create an empty hardhat.config.js

npm install --save-dev @nomicfoundation/hardhat-toolbox

npm install --save-dev hardhat

npm install --save-dev @nomicfoundation/hardhat-ethers ethers

npm install --save-dev @openzeppelin/hardhat-upgrades

npm install --save-dev @nomicfoundation/hardhat-network-helpers

npm install --save dotenv

npm install --save-dev chai@4.3.7

npm install @openzeppelin/contracts

3. Create tests code DONE

---------EXECUTE LOCAL TESTS---------

npm i hardhat-gas-reporter

npx hardhat test


4. Create growth tokens functionalities DONE


---------------ToDo---------------

5. Create teams tokens functionalities

5.1. Add variables DONE

5.2. Add fuding method uptades DONE

5.3. Add withdraw method

5.4. Test team tokens functionalities
-addWalletToWhitelist
--not owner nor whitelister DONE
--as owner DONE
--as whitelister DONE
--same wallet (already added) DONE
--invalid data (wallet address, isTeamWallet, _bitcoinRewardsAddress, _hyaxHoldingAmount) DONE

-removeWalletFromWhitelist
--not owner nor whitelister DONE 
--as owner DONE 
--as whitelister DONE
-already removed DONE


-fundSmartContract (team tokens) DONE
-fund smart contract (team tokens) after funding first time DONE
-TEST for funding upper limits for team and growth tokens GROWTH_TOKENS_TOTAL, TEAM_TOKENS_TOTAL DONE
-first exceeding the limit - revert DONE
-first exactly the limit - approve DONE
-second exceeding the limit DONE


-withdrawTeamTokens DONE
--before being funded DONE
--not in whitelist DONE
--notteammember DONE
--after being funded but beforethe4years DONE
--after4years have passed and it was funded (check all variables) DONE
--before1yearafterfirstwithdraw (you need a way to track the initial tokens in the wallet vs the current tokens) DONE
--afterAYearHasPassedSinceLastWithdrawal DONE
--revertAfterWithdrawingAllTeamTokens DONE
--revertAfterWithdrawingAllOwnTokens DONE
--Print the values of times and token balances DONE


6. Create holder rewards functionalities

address rewardsUpdater DONE

event rewards withdrawn  DONE

variables DONE

fundRewards DONE

updateRewardsUpdaterAddress() DONE

Update the data one by uploading the info or by doing the calculation in the code?


updateValuesOfTokenRewards(mapping rewards (address investorAddress â€“> uint256 rewardAmount))

1. Batch Size Limit: Introduce a limit on the maximum number of wallet addresses that can be updated in a single transaction. This prevents gas exhaustion in case too many addresses are passed. DONE
2. Timestamp Validation: Check whether enough time has passed since the last rewards update. For example, rewards might only be allowed to be updated weekly, so check that the minimum time (7 days) has elapsed. DONE
3. Reentrancy Guard: Add a reentrancy guard to protect against malicious external calls. DONE
4. Hyax Balance Check:  Ensure that the wallet has a non-zero HYAX balance before proceeding to update its rewards. This avoids unnecessary operations on wallets with zero balances. DONE
5. Token Balance Consistency: Before updating the rewards, verify that the contract has enough tokens to distribute rewards based on the current weekly distribution formula. This prevents scenarios where the contract might not have sufficient tokens to cover all wallets. TODO
6. Whitelist Validation: Ensure that the correct event (RewardsUpdated) is emitted only after the state changes are successfully applied. This helps maintain an accurate on-chain history of updates. DONE
7. Ensure that the _walletAddresses array contains unique addresses to prevent duplicate updates.TODO
8. Validate that the _hyaxHoldingAmounts array contains non-negative values. DONE
9. Provide informative error messages to help developers debug issues and identify potential vulnerabilities. DONE


withdrawTokenRewards() DONE


CONTINUE HEREEEEEEEEEEEEEEEE


7. Create additional functionalities for smart contract

withdrawTokensToBurn() DONE

8. Create external script for rewards

calculateWeeklyReward
add all the tokens been holded by the investors and team members that have been whitelisted (m)
take the amount of tokens that the investor is currently holding (n)
divide (n)/(m) to get the pro-rata value that holder is entitled to (%)
multiply that value by the weekly token rewards


8. Test everything locally




---------INITIAL LOCAL DEPLOYMENT---------

npx hardhat node

npx hardhat compile --force

9. Create local upgradeable version

10. Create testnet upgradeable version


----------------------------

Using the following hardhat testing template, generate the following test cases for the "XXXXXXXXXXXXXXXXXXXXXXX", for the solidity smart contract: UpgradeableHYAXRewards.sol

----------------------------



