Goal: Deploy Upgradeable HYAX Rewards Token

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards

---------------DONE---------------

0. Recap the functionalities and requirements 

1. Create a Test-Driven Development plan

2. Set up full dev environment DONE

---------INITIAL HARDHAT SETUP---------

npm init -y

npm install --save-dev hardhat

npx hardhat init

Create an empty hardhat.config.js

npm install --save-dev @nomicfoundation/hardhat-toolbox

npm install --save-dev hardhat

npm install --save-dev @nomicfoundation/hardhat-ethers ethers

npm install --save-dev @openzeppelin/hardhat-upgrades

npm install --save-dev @nomicfoundation/hardhat-network-helpers

npm install --save dotenv

npm install --save-dev chai@4.3.7

npm install @openzeppelin/contracts

3. Create tests code DONE

---------EXECUTE LOCAL TESTS---------

npm i hardhat-gas-reporter

npx hardhat test


4. Create growth tokens functionalities DONE


---------------ToDo---------------

5. Create teams tokens functionalities

5.1. Add variables DONE

5.2. Add fuding method uptades DONE

5.3. Add withdraw method

5.4. Test team tokens functionalities
-addWalletToWhitelist
--not owner nor whitelister DONE
--as owner DONE
--as whitelister DONE
--same wallet (already added) DONE
--invalid data (wallet address, isTeamWallet, _bitcoinRewardsAddress, _hyaxHoldingAmount) DONE

-removeWalletFromWhitelist
--not owner nor whitelister DONE 
--as owner DONE 
--as whitelister DONE
-already removed DONE


-fundSmartContract (team tokens) DONE
-fund smart contract (team tokens) after funding first time DONE
-TEST for funding upper limits for team and growth tokens GROWTH_TOKENS_TOTAL, TEAM_TOKENS_TOTAL DONE
-first exceeding the limit - revert DONE
-first exactly the limit - approve DONE
-second exceeding the limit DONE


-withdrawTeamTokens DONE
--before being funded DONE
--not in whitelist DONE
--notteammember DONE
--after being funded but beforethe4years DONE
--after4years have passed and it was funded (check all variables) DONE
--before1yearafterfirstwithdraw (you need a way to track the initial tokens in the wallet vs the current tokens) DONE
--afterAYearHasPassedSinceLastWithdrawal DONE
--revertAfterWithdrawingAllTeamTokens DONE
--revertAfterWithdrawingAllOwnTokens DONE
--Print the values of times and token balances DONE


6. Create holder rewards functionalities

address rewardsUpdater DONE

event rewards withdrawn  DONE

variables DONE

fundRewards DONE

updateRewardsUpdaterAddress()

updateValuesOfTokenRewards(mapping rewards (address investorAddress â€“> uint256 rewardAmount))

withdrawTokenRewards()




7. Create additional functionalities for smart contract


7. Create external script for rewards

8. Test everything locally




---------INITIAL LOCAL DEPLOYMENT---------

npx hardhat node

npx hardhat compile --force

9. Create local upgradeable version

10. Create testnet upgradeable version


----------------------------

Using the following hardhat testing template, generate the following test cases for the "XXXXXXXXXXXXXXXXXXXXXXX", for the solidity smart contract: UpgradeableHYAXRewards.sol

----------------------------

QUESTIONS

For team tokens. Should withdrawal be based on general date or in time per person?

For investor holder tokens. Should withdrawal be based on general date or in time per person?

Should we store on chain the bitcoin addresses of people? (Better nope: Gas an privacy concerns)

Is there a maximum of team tokens a wallet is expected to hold? (Should be as team member. I.e. No more than 51%)

Should we have a smart contract owner, whitelister address and updater address?



