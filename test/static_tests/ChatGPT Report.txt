1. Impact: Critical Detail: Potential Reentrancy Attack in the withdrawRewardTokens function due to external call hyaxToken.transfer(msg.sender, withdrawableAmount). Despite the nonReentrant modifier, this could allow re-entrancy if transfer is overridden or called indirectly via fallback in the hyaxToken contract.
ANSWER: Added all required checks at the beginning, left the token transaction at the end. Also implemented the SafeERC20 library to ensure a safe transaction of tokens.


2. Impact: High Detail: Possible Integer Overflow/Underflow in growthTokensWithdrawn += withdrawableAmount; and other addition/subtraction operations. Though Solidity 0.8.0 and above has built-in overflow protection, any external interactions or updates to older versions might make this vulnerable. Ensure sufficient audits, especially for backward compatibility.
ANSWER: False positive. The first version of the smart contract is 0.8.20, so there is no backward compatibility risk.


3. Impact: Medium Detail: Unchecked Call Return Value: The hyaxToken.transferFrom(msg.sender, address(this), _amount) call does not verify if the transfer was successful, potentially allowing the function to proceed with a failed transfer. This could lead to misreporting of balances.
ANSWER: False positive. The only function that implements transferFrom() is the fundSmartContract() which is only called by the onwer, which is a multisig. Addionally a require() statement is used to validate the transfer result and the SafeERC20 library is implemented to ensure a safe transaction of tokens.


4. Impact: High Detail: Denial of Service (DoS) in updateRewardsBatch due to a lack of control over the _walletAddresses array size. A high volume of updates could exhaust gas limits and cause DoS for legitimate users.
ANSWER: False positive. There is a require() statement that validates that the _walletAddresses array size is less than the maximumBatchSizeForUpdateRewards.


5. Impact: Medium Detail: Front-Running Attack: The withdrawTokensToBurn function, which allows withdrawal by the owner, could be manipulated if transaction ordering is influenced, enabling others to observe and react based on intended burns. Protect by adding multi-sig or timelock mechanisms.
ANSWER: False positive. The owner wallet is already a multisig. 


6. Impact: Critical Detail: Insecure Access Control: The updateRewardsSingle function relies on the onlyOwnerOrRewardsUpdater modifier but doesn’t restrict updates based on user roles. If rewardsUpdaterAddress is compromised, rewards can be updated arbitrarily for any wallet, leading to fraud risks. 
ToDo:
-Add access control for onlyOwner() require()  DONE 
-Add access control for onlyOnwerOrUpdaterAddress() DONE
-Add access control for onlyOnwerOrWhitelisterAddress() DONE
-Update function of update whitelister with revoking and granting access control DONE
-Update tests

npx hardhat test
npx hardhat test "test/unit_test/Test case #12. Update rewards for a single non team wallet.ts"

ANSWER: Updated control to access functionalities from Ownable() to AccessControlEnumerableUpgradeable() library in order to asign specific roles to the addresses.


7. Impact: Low Detail: Short Address Attack: No explicit check on the length of the _walletAddress parameter in addWalletToWhitelist. Consider adding an address length check, though Solidity’s built-in checks mitigate this risk somewhat.
ANSWER: Added the size control for the wallet address before adding it to the whitelist.


8. Impact: High  Detail: Uninitialized State Variable: The contract constructor is not explicitly defined, which risks inadvertently calling the initialize function without setting values correctly. Consider adding initializer checks or setting default values.
ANSWER: Variables have been initialized to default values in the contract constructor


9. Impact: Critical  Detail: Delegatecall Injection: If any external calls indirectly invoke delegatecall (not observed directly), it would allow executing code within the context of this contract. Double-check dependencies and imports for delegatecall use.
ANSWER: No delegatecall use have been implemented. Will see the results of advanced audits.


10. Impact: Medium  Detail: Timestamp Dependence: The block.timestamp dependency in functions like withdrawGrowthTokens introduces susceptibility to miner manipulation.
ANSWER: False positive. There is dependance on the block.timestamp however, this vulnerability can have a 15 second delay window, which is not a risk for this function that's allowed to be executed once a year and the one who executes the function is the multisign wallet owner.


11. Impact: Critical Detail: Tx.origin Authentication: The onlyOwnerOrWhitelister modifier emits tx.origin without a specific need. If any logic relies on tx.origin for authentication elsewhere, this could open a path for phishing-style attacks where a trusted contract could be tricked into using the user’s tx.origin for authorization.
ANSWER: False positive. The tx.origin parameter is only used for login the origin of the transaction in functions that are restricted to be executed by the owner, the whitelister, the rewardsupdater or the smart contract itself.


12. Impact: Critical Detail: Unrestricted Ether Withdrawal: The withdrawTokensToBurn function does not limit who can withdraw tokens or if they are sent only to the owner. If ownership is transferred maliciously, any funding can be withdrawn unrestrictedly. Consider restricting the withdraw functionality to specific conditions.
ANSWER: Modified the function so that only the owner from the multisig can withdraw tokens to burn.


13. Impact: High Detail: Race Condition: In the fundSmartContract function, growthTokensInSmartContract is updated after growthTokensFunded, creating a potential for race conditions if called simultaneously by multiple users. Consider synchronizing updates or limiting external calls within the function to avoid discrepancies in the balances.
ANSWER: The execution order is true, but the only address that can execute that function is the onwer multisig.


14. Impact: Medium Detail: Insufficient Gas Griefing: During the withdrawGrowthTokens function, there is no gas stipend check for the transfer function to the owner. If the recipient reverts due to insufficient gas, it could prevent legitimate withdrawals, creating a griefing vector.
ANSWER: The withdrawGrowthTokens() function is only executed by the owner and the transfer function implements the library SafeERC20. So risks are mitigated.


15. Impact: High Detail: Gas Limit Vulnerabilities: In the updateRewardsBatch function, processing too many wallets at once may exceed gas limits, causing batch transactions to fail. Implementing a gas threshold or restricting array size can improve resilience to this vulnerability.
ANSWER: False positive. The requirement maximumBatchSizeForUpdateRewards, validates that the number of wallets to be processed is below the maximum batch threshold established.


16. Impact: High Detail: Unchecked External Calls: The external hyaxToken.transferFrom call lacks a check on the return value, potentially allowing the function to proceed with a failed transfer. This could lead to inaccurate tracking of token balances if the transfer fails silently.
ANSWER: False positive. The hyaxToken.transferFrom functionality is executed inside of a require() statement and the transferFrom function is implemented using SafeERC20 to mitigate problems of failed transfers.


17. Impact: Medium Detail: Unchecked Return Data: In the addWalletToWhitelist function, there is no explicit validation on whether address attributes or the whitelisting logic are processed correctly. Address whitelisting without a successful confirmation could impact reward distributions or lead to discrepancies.
ANSWER: Added validation of registration at the end with require() statement.


18. Impact: High Detail: Oracle Manipulation: If any price or external data is required (e.g., for token distributions), this contract lacks protections against manipulated values, especially when relying on external contract interactions. Ensure any oracle data is verified and reliable to prevent abuse.
ANSWER: The oracle data used is from the reliable Chainlink price feeds.


19. Impact: Critical Detail: Logic Errors: The updateTeamMemberWallet function incorrectly resets the old team member wallet and transfers all attributes to the new wallet address without confirming the new member’s role or account status. Malicious actors could abuse this transfer to obtain team tokens illegitimately.
ANSWER: Added validation of added new wallet and removal of old wallet at the end with require() statement.


20. Impact: High Detail: Flash Loan Attack Vectors: In the fundSmartContract function, a malicious actor could exploit flash loans to fund, withdraw, and burn tokens within the same transaction. Adding time delays or requiring non-instantaneous funding helps mitigate this attack vector.
ANSWER: False positive. The fundSmartContract() function can only be executed by the owner, the owner is a multisig and this function only receives hyax tokens.


21. Impact: High Detail: Storage Collision: Multiple mappings, enums, and flags are set in the storage layout, which could lead to storage collision if future contracts are added or if data is manipulated within upgradeable functions. Explicitly specify storage slots to avoid collisions, particularly in upgradeable contracts.
ANSWER: Storage slots will be tracked using the Upgradeable library from oppenzeppelin and a gap of uint256[50] private __gap; was added at the end of variable declaration to avoid possible collisions.


22. Impact: Critical Detail: Reentrancy Guard Bypass: Although the contract uses ReentrancyGuardUpgradeable, the onlyOwnerOrWhitelister modifier emits an event before checking reentrancy. This event could expose data or provide a way to bypass reentrancy control in other calls. Place reentrancy checks earlier to prevent potential bypasses.
ANSWER: The reentrancy risk in the functions executed by onlyOwnerOrWhitelister is zero because the only authorized to execute these functions are exclusively the owner or the whitelister.


23. Impact: Medium Detail: Improper Error Handling: The require statement in fundSmartContract fails silently if an invalid _fundingType is passed. While this halts execution, it lacks context for debugging and would benefit from a custom error or detailed revert message to aid developers and users.
ANSWER: False positive. There is a require() that in case of failing reverts the function with the message "Invalid funding type".


24. Impact: Medium Detail: Ambiguous Evaluation Order: In withdrawGrowthTokens, there are chained require statements and complex conditional logic. If order changes inadvertently in future versions, it could lead to different evaluations or unexpected outcomes. Refactor conditions to avoid ambiguity in execution.
ANSWER: Added variable to refactor and avoid ambiguity in execution. Also separated the require statements so each one validates single conditions.


25. Impact: High Detail: ABI Hash Collisions: Events in the contract could generate ABI selector collisions if similar function names with identical parameters are added. For instance, FundingAdded and TokensToBurnWithdrawn have similar parameters, increasing collision risk. Adding unique identifiers to events will reduce the likelihood of collisions.
ANSWER: Added unique identifiers to events.


26. Impact: Critical Detail: Approval Vulnerabilities: The updateHyaxTokenAddress function resets the token address without clearing existing approvals from previous tokens, potentially allowing an old token contract to retain control over approvals. Ensure approvals are reset on token address updates to prevent this attack.
ANSWER: The rewards smart contract doesn't generate approvals over the token. It's all the other way around. It's the owner who approves transfers over the rewards smart contract to fund it. Additionally, once implemented the upgradeable token version, this functionality could be restricted to the launch of the smart contract. In case that extra revoking it's required, it would be implemented via an external .js script.


27. Impact: Medium Detail: Exposed Data: Wallet information in the wallets mapping, including reward status and whitelisting times, is publicly accessible. This could be exploited by malicious actors to target specific wallet addresses. Consider reducing data exposure by using internal visibility where feasible.
ANSWER: That is data that's intended to be publicly available due to transparency business requirements.


28. Impact: Low Detail: Incorrect Parameter Order: In fundSmartContract, _fundingType appears before _amount. Incorrect parameter order may cause human error or call mismatches. Reorder parameters for clarity or document parameters to improve accuracy.
ANSWER: False positive. The event first reports the fundingType and then the amount value.


29. Impact: High Detail: Unexpected Ether Transfers (Force Feeding): The withdrawGrowthTokens and other withdrawal functions could be force-fed Ether, leading to confusion in balance tracking. Consider adding logic to reject unexpected Ether sent to the contract to avoid misleading balance interpretations.
ANSWER: False positive. Only the owner, which is a multisig managed by the executive team can execute the withdrawGrowthTokens function.


30. Impact: High Detail: Unchecked Low-Level Calls: The call to hyaxToken.transferFrom lacks a check on return values, creating risk if the call fails silently. This can lead to discrepancies between contract state and actual token balances. Implement explicit return checks for all external token transfers to maintain accuracy.
ANSWER: False positive. The transferFrom() uses the SafeERC20 library for a safe transfer and has a require() statement to validate the status of the return.

CONTINUE HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

31. Impact: High Detail: Gas Optimization: In fundSmartContract, the repeated use of _amount could be optimized by using memory caching. Store hyaxToken.transferFrom result once in memory, reducing redundant calculations and lowering gas costs.
ANSWER: Cached the transferFrom transaction result by using the boolean transferSuccessful.


32. Impact: Medium Detail: Best Practice: The onlyOwnerOrWhitelister modifier emits tx.origin for logging purposes, which is generally discouraged due to the risk of phishing attacks. Prefer using msg.sender exclusively to avoid unintended side effects and improve security.
ANSWER: Log eliminated because it was used just for debbugin purposes.

33. Impact: High Detail: Gas Optimization: withdrawGrowthTokens function includes multiple require checks that could be refactored into a single conditional, reducing gas by minimizing code branching. Combining these checks could optimize execution flow and cut down on gas usage.
ANSWER: This function is not used often to its impact it's low. The require checks are required to be separated for traceability purposes.

34. Impact: Medium Detail: Best Practice: In updateRewardsBatch, the unchecked loop through _walletAddresses is limited by maximumBatchSizeForUpdateRewards, but limiting batch processing further or capping gas per transaction would improve safety and gas usage predictability. Consider also reverting partially filled arrays on failure.
ANSWER: This functionality efficiency will be manage off chain in order to implement the right gas checks.

35. Impact: Low Detail: Gas Optimization: Modifier-based checks, such as onlyAdminOrWhitelister, are more gas-efficient when added as function code instead of modifiers. Consider inlining logic within critical functions to cut down on the gas cost of separate modifier calls.
ANSWER: This modifier is used 3 times across the contract, its more efficient to keep it.

36. Impact: Medium Detail: Best Practice: The wallets mapping holds large structs accessible publicly, exposing more data than necessary. Making sensitive attributes private or creating specific getters reduces potential external queries and saves gas by preventing unnecessary state reads.
ANSWER: The attributes are not sensitive and were requested by the company team in order to increase transparency.

37. Impact: Medium Detail: Best Practice: The initialize function uses hard-coded values for initial funding amounts and limits. Instead, consider defining constants for these values within an immutable pattern, which enhances readability and reduces gas by storing them in the contract's code rather than storage.
ANSWER: Those values can not be defined as constants because they are expected to be able to change based on business requirements.


38. Impact: Low Detail: Gas Optimization: In fundSmartContract, _fundingType is verified multiple times within a conditional check. Storing the conditional result in memory and referencing it minimizes redundant code execution and cuts down on gas usage.
ANSWER: This function is used few times. Also adding the variables required to do the check would increase the contract size. Decided to leave it that way.


39. Impact: Medium Detail: Best Practice: The updateRewardsSingle function could benefit from separating logic for different wallet statuses, improving modularity and readability. Refactoring wallet status checks and error messages streamlines the code and makes debugging easier.
ANSWER: Separating the logic for this single function would increase contract size. Something that's not the focus at this point.


40. Impact: High Detail: Gas Optimization: The updateTeamMemberWallet function duplicates logic for transferring wallet attributes. Consolidate this transfer logic into one step for both readability and gas efficiency, especially given the multiple struct member assignments.
ANSWER: Improved the contract order and logic to increase readability and gas efficiency.