Goal: Deploy Upgradeable HYAX Rewards Token

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Token
D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards


---------------DONE---------------

0. Recap the functionalities and requirements 

1. Create a Test-Driven Development plan

2. Set up full dev environment DONE

---------INITIAL HARDHAT SETUP---------

npm init -y

npm install --save-dev hardhat

npx hardhat init

Create an empty hardhat.config.js

npm install --save-dev @nomicfoundation/hardhat-toolbox

npm install --save-dev hardhat

npm install --save-dev @nomicfoundation/hardhat-ethers ethers

npm install --save-dev @openzeppelin/hardhat-upgrades

npm install --save-dev @nomicfoundation/hardhat-network-helpers

npm install --save dotenv

npm install --save-dev chai@4.3.7

npm install @openzeppelin/contracts

3. Create tests code DONE


---------EXECUTE LOCAL TESTS---------

npm i hardhat-gas-reporter

npx hardhat test


4. Create growth tokens functionalities DONE

---------------ToDo---------------

5. Create teams tokens functionalities

5.1. Add variables DONE

5.2. Add fuding method uptades DONE

5.3. Add withdraw method

5.4. Test team tokens functionalities
-addWalletToWhitelist
--not owner nor whitelister DONE
--as owner DONE
--as whitelister DONE
--same wallet (already added) DONE
--invalid data (wallet address, isTeamWallet, _bitcoinRewardsAddress, _hyaxHoldingAmount) DONE

-removeWalletFromWhitelist
--not owner nor whitelister DONE 
--as owner DONE 
--as whitelister DONE
-already removed DONE


-fundSmartContract (team tokens) DONE
-fund smart contract (team tokens) after funding first time DONE
-TEST for funding upper limits for team and growth tokens GROWTH_TOKENS_TOTAL, TEAM_TOKENS_TOTAL DONE
-first exceeding the limit - revert DONE
-first exactly the limit - approve DONE
-second exceeding the limit DONE


-withdrawTeamTokens DONE
--before being funded DONE
--not in whitelist DONE
--notteammember DONE
--after being funded but beforethe4years DONE
--after4years have passed and it was funded (check all variables) DONE
--before1yearafterfirstwithdraw (you need a way to track the initial tokens in the wallet vs the current tokens) DONE
--afterAYearHasPassedSinceLastWithdrawal DONE
--revertAfterWithdrawingAllTeamTokens DONE
--revertAfterWithdrawingAllOwnTokens DONE
--Print the values of times and token balances DONE


6. Create holder rewards functionalities

address rewardsUpdater DONE

event rewards withdrawn  DONE

variables DONE

fundRewards DONE

updateRewardsUpdaterAddress() DONE

Update the data one by uploading the info or by doing the calculation in the code?


updateValuesOfTokenRewards(mapping rewards (address investorAddress â€“> uint256 rewardAmount))

6.1. Batch Size Limit: Introduce a limit on the maximum number of wallet addresses that can be updated in a single transaction. This prevents gas exhaustion in case too many addresses are passed. DONE
6.2. Timestamp Validation: Check whether enough time has passed since the last rewards update. For example, rewards might only be allowed to be updated weekly, so check that the minimum time (7 days) has elapsed. DONE
6.3. Reentrancy Guard: Add a reentrancy guard to protect against malicious external calls. DONE
6.4. Hyax Balance Check:  Ensure that the wallet has a non-zero HYAX balance before proceeding to update its rewards. This avoids unnecessary operations on wallets with zero balances. DONE
6.5. Token Balance Consistency: Before updating the rewards, verify that the contract has enough tokens to distribute rewards based on the current weekly distribution formula. This prevents scenarios where the contract might not have sufficient tokens to cover all wallets. TODO
6.6. Whitelist Validation: Ensure that the correct event (RewardsUpdated) is emitted only after the state changes are successfully applied. This helps maintain an accurate on-chain history of updates. DONE
6.7. Ensure that the _walletAddresses array contains unique addresses to prevent duplicate updates.TODO
6.8. Validate that the _hyaxHoldingAmounts array contains non-negative values. DONE
6.9. Provide informative error messages to help developers debug issues and identify potential vulnerabilities. DONE

withdrawTokenRewards() DONE


7. Create additional functionalities for smart contract

withdrawTokensToBurn() DONE


8. Add requirement updates. 

8.1. There is a single date for team people to withdraw their tokens.
-Admin sends tokens to smart contract
-A timer starts to count the time once the tokens are sent
-There is a function that returns the year based on the current date: e.g. 1, 2, 3, ...
-Each team member stores the amount of times the extracted their team tokens: e.g. 1, 2, 3, 4
-To withdraw tokens the condition must be met: 
The value of the variable of the team member must be less to the number of the year.

-Tries to withdraw before the first year DONE
-Tries to withdraw two times after the first year DONE
-Tries to withdraw two times after the second year DONE
-Tries to withdraw five times after the fifth year DONE
-Tries to withdraw six times after the fith year DONE

8.2. Transparency goal: A part of the tokens could be sent to an options pool wallet. OK

8.3. Token rewards can be extracted by people whenever they want DONE

8.4. There is an isBlacklisted parameter added to the smart contract data DONE

8.7. Update whitelist status DONE

8.8. Update blacklist status DONE


8.5. Bitcoin address WON'T be stored in the smart contract DONE

8.6. Max tokens a wallet can hold is maximum of total dedicated tokens DONE



9. Create external script for rewards

calculateWeeklyReward
Rewards are calculated based on snapshot taken from last week holdings
add all the tokens been holded by the investors and team members that have been whitelisted (m)
take the amount of tokens that the investor was holding last week (n)
divide (n)/(m) to get the pro-rata value that holder is entitled to (%)
multiply that value by the weekly token rewards
---

https://amoy.polygonscan.com/address/0x37db03be6e7e967e7925d508ebd57bdfee392d62#code

npx hardhat run scripts/updateWeeklyRewards.ts


9.1. Get the address and the abi of the smart contract DONE

9.2. Get the list of the smart contract token holders DONE

9.3. Query the blockchain for last week holdings of investors CURRENTLY whitelisted DONE

Query the blockchain for last week holdings of team members CURRENTLY whitelisted

9.4. Add all the holdings up. DONE

9.5. Create a mapping of addresses and values DONE

the amount of the reward is the amount of tokens that the investor was holding last week (n) / the tokens been holded by the investors and team members that have been whitelisted (m)

Store the amount of weekly reward in the array/mapping DONE

Add up all the rewards to distribute and check is less than the smart contract value REWARD_TOKENS_PER_WEEK DONE

9.6. Create a batch transaction by 20 and send it 

-Launch HYAX smart contract for tokens DONE
-Distribute tokens among 5 investor wallets. And 3 team wallets.
--Send HYAX to smart contract
--Add investor to whitelist
--Approve transfer from buyer token


Investor wallets
0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1 100 WBTC Approved 1 WBTC Transfered
0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4 100 WBTC Approved 3 WBTC Transfered
0x34795B6a05543Fe097C8BbBc221e3119f27B793E 100 WBTC Approved 5 WBTC Transfered
0xb44e0C06718534F27847e607B6AE9368798fB974 100 WBTC Approved 10 WBTC Transfered
0xEDfcDEf54AE487Bd2F49e88E5b447cC26eB48e47 100 WBTC Approved 7 WBTC Transfered

---
Team wallets
0x350441F8a82680a785FFA9d3EfEa60BB4cA417f8 3000000000000000000000000 3M HYAX 100 WBTC
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3 2000000000000000000000000 2M HYAX
0x7dE9a234E67b9Ac172c803555f5aA7fFf3DB5581 5000000000000000000000000 5M HYAX

---
Approve
0x55a0E75dA1Ea313b5e051be15d884D26C5332EaD Proxy
0x1Cb720D712776F8F1f4CC6Baf58FAD3931F8df94 Implementation

100 WBTC
100000000000000000000
1 WBTC
1000000000000000000



10. Launch rewards basic smart contract   
v1: 0x7B008f7a8d377A351d7934632128d738a2200cf8
v2: 0xcdd08884D34f2c6Ac7f6DB00D4eB50faAfbbb8F0
v3: 0x57ba336A233a9a1F1404f73Ce46F444618209a61
v4: 0x391f57D9E044599aC4d7A3a340f7343c98824D41

npx hardhat run --network polygonAmoy scripts/deploy_testnet_Rewards_contract.ts

npm install --save-dev @nomicfoundation/hardhat-verify

npx hardhat verify --network polygonAmoy 0x391f57D9E044599aC4d7A3a340f7343c98824D41 0xCd1fA2C8626B023197158aC84C5DF56EDD1F3f0C


-Set up rewards basic smart contract

500000000000000000000000000 500 M
1000000000000000000000000000 1B

--Update whitelister and rewards updater address DONE
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3
--Add team addresses to whitelist DONE
--Fund the rewards basic smart contract with tokens for the team. (GrowthTokens, TeamTokens, or RewardTokens) Can be by minting new tokens. DON'T FORGET TO APPROVE!DONE 
--Add investor wallets to whitelist of rewards contract


npx hardhat run scripts/updateWeeklyRewards.ts

-Create a single transaction for updates and send it 
--Set up connection to write to smart contract basic test like update whitelisteraddress 
--Setup single update transaction DONE
--Setup batch transaction DONE

0x6Fbc023ACCBA56c1b32bDaFA2F27D4cd58145AB1 I  
0x9a4B007a10E1d1EC63157c8D69eBa76F30B4a2B4 I
0x34795B6a05543Fe097C8BbBc221e3119f27B793E I
0xb44e0C06718534F27847e607B6AE9368798fB974 I
0xEDfcDEf54AE487Bd2F49e88E5b447cC26eB48e47 I   Updated
0x350441F8a82680a785FFA9d3EfEa60BB4cA417f8 (T)
0x01c2f012de19e6436744c3F81f56E9e70C93a8C3 (T)
0x7dE9a234E67b9Ac172c803555f5aA7fFf3DB5581 (T) Updated


11. Add all required tests based on what's left to test

-Fund smart contract with reward tokens DONE
-Fund smart contract with reward tokens after having already funded the first time DONE

-updateRewardsSingle non team wallets
12.1. Revert because its not in whitelist DONE
12.2. Revert because is blacklisted DONE
12.3. Revert because rewards exceed the weekly limit DONE
12.4. Revert because there are no enough tokens in the contract for rewards DONE
12.5. Successfull update DONE
12.6. Revert because tried to do it in less than 1 week DONE


-updateRewardsBatch non team wallets
13.1. Revert all 3 updates because wallets are not whitelisted DONE
13.2. Revert only 2 updates because wallets are not whitelisted DONE
13.3. Revert only 1 update because the wallet is not whitelisted DONE
13.4. Revert all 3 updates because wallets are blacklisted DONE
13.5. Revert only 2 updates because wallets are blacklisted DONE
13.6. Revert only 1 update because the wallet is blacklisted DONE
13.7. Revert because the rewards exceed the weekly limit DONE
13.8. Revert because the batch exceeds the maximum size defined for updates DONE
13.9. Revert because there are not enough tokens in the smart contract for rewards DONE
13.10. Revert because there is array mismatch DONE
13.11. Successful full update DONE
13.12. Revert because tried to do it in less than 1 week DONE


-withdrawRewardTokens non team wallets
14.1. Revert because funding has not started yet DONE
14.2. Revert because wallet is not whitelisted DONE
14.3. Revert because wallet is blacklisted DONE
14.4. Revert because there are not rewards available for that wallet DONE
14.5. Revert because there are not tokens in the contract to withdraw DONE
14.6. Successfully withdraw reward tokens DONE
14.7. Revert because all reward tokens have been withdrawn DONE

TEST CASES
-updateRewardsSingle for team wallets DONE
-updateRewardsBatch for team wallets DONE
-withdraw rewards for team wallets DONE
-calculateYearForTeamTokens: Fix the days on the testing. I.e. Day 1 - Day 364 DONE

-withdrawTokensToBurn DONE
--Wrong account 
--Invalid type
--For GrowthTokens, TeamTokens, RewardTokens
---Amount to withdraw is zero DONE
---Funding not startet yet DONE
---Insufficient tokens in the contract to withdraw DONE
---Successfully withdraw DONE

-updateWhiteListerAddress DONE
-updateRewardsUpdaterAddress DONE
-updateHyaxTokenAddress DONE
-pause and unpause DONE
-transferOwnership DONE

ALL FUNCTIONALITIES
addWalletToWhitelist
updateWhitelistStatus
updateBlacklistStatus
fundSmartContract
withdrawGrowthTokens
withdrawTeamTokens
calculateYearForTeamTokens
updateRewardsBatch
updateRewardsSingle
withdrawRewardTokens
withdrawTokensToBurn
updateWhiteListerAddress
updateRewardsUpdaterAddress
updateHyaxTokenAddress
updateMaximumBatchSizeForUpdateRewards
pause
unpause
transferOwnership


UPDATED REQUIREMENTS
15. Blacklist also for the token smart contract. DONE

16. Capacidad de restaurar los tokens de una wallet de un miembro del equipo en caso de perdida.
Add wallet & remove wallet.
RecoverTeamWallet
INPUT: address teamWallet, address newWallet

-Only owner non reentrancy
-Changes status to whitelisted and team member (simmilar to add new wallet)
-Takes the previous wallet to 0 in rewards
-Takes the new wallet to the previous rewards
-Changes status of previous wallet to non white listed, non team member

17. Add events to ALL functions DONE

18. Test all cases for the recoverTeamTokens function

26.1. Revert because funding has not started yet DONE
26.2. Revert because Old wallet address is not a team wallet DONE
26.3. Revert because Old team member wallet address is not whitelisted DONE
26.4. Revert because Old team member wallet address is blacklisted DONE
26.5. Revert because New team member wallet address cannot be the zero address DONE
26.6. Revert because New team member wallet address cannot be the same as the old team member wallet address DONE
26.7. Revert because New team member wallet address is already whitelisted DONE
26.8. Revert because New team member wallet address is already a team wallet DONE
26.9. Revert because New team member wallet address is blacklisted DONE

WHITOUT REWARDS
26.10. Successfully execute for a wallet in year zero DONE
26.11. Successfully execute for a wallet in year one DONE
26.12. Successfully execute for a wallet in year two DONE
26.13. Successfully execute for a wallet in year three DONE
26.14. Successfully execute for a wallet in year four DONE
26.15. Successfully execute for a wallet in year five DONE

WITH REWARDS
26.16. Successfully execute for a wallet in year zero DONE
26.17. Successfully execute for a wallet in year one DONE
26.18. Successfully execute for a wallet in year two DONE
26.19. Successfully execute for a wallet in year three DONE
26.20. Successfully execute for a wallet in year four DONE
26.21. Successfully execute for a wallet in year five DONE

WITH REWARDS AFTER TEAM TOKEN WITHDRAWAL
26.22. Successfully execute for a wallet in year four DONE
26.23. Successfully execute for a wallet in year five DONE
26.24. Successfully execute for a wallet in year six DONE
26.25. Successfully execute for a wallet in year seven DONE
26.26. Successfully execute for a wallet in year eight DONE

WITH REWARDS AFTER TEAM TOKEN WITHDRAWAL AND REWARDS WITHDRAWAL
26.27. Successfully execute for a wallet in year four DONE
26.28. Successfully execute for a wallet in year five DONE
26.29. Successfully execute for a wallet in year six DONE
26.30. Successfully execute for a wallet in year seven DONE
26.31. Successfully execute for a wallet in year eight DONE

9.13. Successfully withdraw team tokens after recovering the wallet DONE
9.14. Revert when trying to withdraw tokens after recovering the wallet before a year has elapsed DONE
9.15. Revert when trying to withdraw tokens after recovering the wallet after withdrawing all team tokens DONE

17.8. Successfully  withdraw reward tokens after recovering the wallet DONE
17.9. Revert when trying to withdraw tokens after recovering the wallet after withdrawing all reward tokens that wallet has DONE


19. Test fail cases
19.1. If a single transaction update fails, everything fails. Make sure it executes everything right and the one that fails gets emited as event. DONE

19.2. If the wallet gets updated from whitelist to false, its possible to add it again. Which shouldn't happen. Add check by added to whitelist time. DONE

19.3. If updateWhitelistStatus gets executed, the wallet MUST be added to the whitelist BEFORE executing the function DONE

19.4. The function updateBlacklistStatus can be executed WITHOUT adding the address to the whitelist. DONE


19.5. Run test cases with for loops and increasing evm time to simulate the end of the days.
-withdrawGrowthTokens DONE
-withdrawTeamTokens DONE
-updateRewardsBatch 13.13. 16.13 DONE
-updateRewardsSingle 12.7. 15.7. DONE
-withdrawRewardTokens 14.8 - 17.8 DONE

20. Add upgradeable tests DONE

21. Add gas library to tests DONE

npm i hardhat-gas-reporter 

22. Update updates script DONE


npx hardhat run scripts/updateWeeklyRewards.ts 

24. Add all security checks and more learned in skills and job hunting experience (4 days)

24.1. Create unit tests DONE

24.2. Format the unit tests for both contracts DONE

|_test
|_ _unit_tests
|_ _integration
|_ _end-to-end tests

24.3. Keep reading about testing DONE

24.4. Perform initial testing for static analysis using LLMs

-Token Contract
ChatGPT DONE
Gemini DONE
Copilot DONE

-Rewards Contract
ChatGPT DONE 
Gemini DONE
Copilot DONE

24.4.1. Reentrancy attacks DONE
24.4.2. Integer Overflow and Underflow vulnerabilities DONE
24.4.3. Unchecked Call Return Value attacks DONE
24.4.4. Denial of Service (DoS) attacks DONE
24.4.5. Front-Running attacks DONE
24.4.6. Insecure Access Control DONE
24.4.7. Short Address Attack DONE
24.4.8. Uninitialized Storage Pointers (Uninitialized State Variables) DONE
24.4.9. Delegatecall Injection DONE
24.4.10. Timestamp Dependence DONE

24.4.11. Tx.origin Authentication DONE
24.4.12. Unrestricted Ether Withdrawal DONE
24.4.13. Race Conditions DONE
24.4.14. Insufficient Gas Griefing DONE
24.4.15. Gas Limit Vulnerabilities DONE
24.4.16. Unchecked External Calls DONE
24.4.17. Unchecked Return Data DONE
24.4.18. Oracle Manipulation DONE
24.4.19. Logic Errors DONE
24.4.20. Flash Loan Attack Vectors DONE

24.4.21. Storage Collision DONE
24.4.22. Reentrancy Guard Bypass DONE
24.4.23. Improper Error Handling DONE
24.4.24. Ambiguous Evaluation Order DONE
24.4.25. ABI Hash Collisions DONE
24.4.26. Approval Vulnerabilities DONE
24.4.27. Exposed Data DONE
24.4.28. Incorrect Parameter Order DONE
24.4.29. Unexpected Ether Transfers (Force Feeding) DONE
24.4.30. Unchecked Low-Level Calls DONE

24.4.31. Gas optimization DONE
24.4.32. Suggestions for best practices DONE


24.5. Execute static analysis using security tools

D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Token
D:&cd D:\USER\Downloads\ATLAS\Projects\HYAX-Upgradeable-Rewards
D:&cd D:\USER\Downloads\ATLAS\Projects

https://github.com/PatrickAlphaC/hardhat-security-fcc/

24.5.1. Test running ETH Security Toolbox 


-Token Contract
--Slither: static analysis tool. https://github.com/crytic/slither DONE
--Mythril: symbolic execution and taint analysis. https://github.com/Consensys/mythril DONE

-Rewards Contract
--Slither: static analysis tool. https://github.com/crytic/slither DONE
--Mythril: symbolic execution and taint analysis. https://github.com/Consensys/mythril DONE

24.6. Fuzzy testing

-Token Contract
--Medusa: fuzz testing tool  DONE

-Rewards Contract
--Medusa: fuzz testing tool DONE

CONTINUE HEREEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE

24.7. Linters and Formatters

-Token Contract

--Solhint: Linter DONE
--Prettier: Formatter DONE

-Rewards Contract

--Solhint: Linter DONE
--Prettier: Formatter DONE

UP TO HERE-------------------------------

23. Add updates to contracts based on reports and update repos

25. Clean comments and fix documentation on contract and tests (2 days)


Questions: The withdrawTokensToBurn function should send the tokens to the owner wallet or to the treasury wallet?

To check:

getCurrentTokenPrice() function. Price freshness validation.
getCurrentTokenPrice() function. Oracle price manipulation validation.

26. Deploy in testnet (3 days) 

23. Optimize updates script. (2 days) Execute 10 batch transactions each sending a pack of 10 updates. and simulate it. In case the update fails, store the values of the wallets that failed to later try to update them manually.

26. Transacion optimization and simulation? https://docs.alchemy.com/reference/alchemy-sendgasoptimizedtransaction (2 days)

26. Test upgradeability with multisig transaction (2 days)

27. DOCUMENT EVERYTHING. DON'T FORGET THE VIDEOS (4 days)

28. Share to the web2 team + rewards update script (4 days)

29. Do realistic tests with team . I.e. 1 Day = week of rewards (1 week)

QUESTION
Function name: withdrawTokensToBurn() or withdrawTokensOnlyOwner()

---------INITIAL LOCAL DEPLOYMENT---------

npx hardhat node

npx hardhat compile --force

Create local upgradeable version

Create testnet upgradeable version




